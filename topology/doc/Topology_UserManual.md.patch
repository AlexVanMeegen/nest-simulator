--- Topology_UserManual-patched.md
+++ Topology_UserManual-patched.md
@@ -76,364 +76,16 @@
 
 We create a first, grid-based simple layer with the following commands:
 
-``` {.python linerange="layer1-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer1-end
 ```
 
 ![Simple grid-based layer centered about the origin. Blue circles mark
 layer elements, the thin square the extent of the layer. Row and column
 indices are shown in the right and top margins,
-respectively.[]{label="fig:layer1"}](layer1){#fig:layer1
-width="0.5\linewidth"}
+respectively.](user_manual_figures/layer1.png){#fig:layer1}
 
-The layer is shown in Fig. [2.1](#fig:layer1){reference-type="ref"
-reference="fig:layer1"}. Note the following properties:
+The layer is shown in Fig. {@fig:layer1}. Note the following properties:
 
 -   The layer has five *rows* and five *columns*.
 
@@ -446,14 +98,13 @@
 
 -   The *extent* or size of the layer is $1\times
       1$. This is the default size for layers. The extent is marked by
-    the thin square in Fig. [2.1](#fig:layer1){reference-type="ref"
-    reference="fig:layer1"}.
+    the thin square in Fig. {@fig:layer1}.
 
 -   The *grid spacing* of the layer is
-    $$\label{eq:dx_dy_extent}\begin{split}
+    $$\begin{split}
     dx &= \frac{\text{x-extent}}{\text{number of columns}} \\
     dy &= \frac{\text{y-extent}}{\text{number of rows}}
-    \end{split}$$ In the layer shown, we have $dx=dy=0.2$, but the grid
+    \end{split}$$ {#eq:dx_dy_extent} In the layer shown, we have $dx=dy=0.2$, but the grid
     spacing may differ in x- and y-direction.
 
 -   Layer elements are spaced by the grid spacing and are arranged
@@ -469,8 +120,7 @@
 
 -   Each element of a grid-based layer has a *row- and column-index* in
     addition to its $(x,y)$-coordinates. Indices are shown in the top
-    and right margin of Fig. [2.1](#fig:layer1){reference-type="ref"
-    reference="fig:layer1"}. Note that row-indices follow matrix
+    and right margin of Fig. {@fig:layer1}. Note that row-indices follow matrix
     convention, i.e., run from top to bottom. Following pythonic
     conventions, indices run from 0.
 
@@ -480,363 +130,16 @@
 extent of a layer, i.e., its size in $x$- and $y$-direction by adding an
 `'extent'` entry to the dictionary passed to `CreateLayer`:
 
-``` {.python linerange="layer2-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
-```
-
-![Same layer as in Fig. [2.1](#fig:layer1){reference-type="ref"
-reference="fig:layer1"}, but with different
-extent.[]{label="fig:layer2"}](layer2){#fig:layer2
-width="0.8\linewidth"}
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer2-end
+```
+
+![Same layer as in Fig. {@fig:layer1}, but with different
+extent.](user_manual_figures/layer2.png){#fig:layer2}
+
 
 The resulting layer is shown in
-Fig. [2.2](#fig:layer2){reference-type="ref" reference="fig:layer2"}.
+Fig. {@fig:layer2}.
 The extent is always a two-element tuple of floats. In this example, we
 have grid spacings $dx=0.4$ and $dy=0.1$. Changing the extent does not
 affect grid indices.
@@ -853,363 +156,17 @@
 layer. The following code creates layers centered about $(0,0)$,
 $(-1,1)$, and $(1.5,0.5)$, respectively:
 
-``` {.python linerange="layer3-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer3-end
 ```
 
 ![Three layers centered, respectively, about $(0,0)$ (blue), $(-1,-1)$
 (green), and $(1.5,0.5)$
-(red).[]{label="fig:layer3"}](layer3){#fig:layer3 width="0.8\linewidth"}
+(red).](user_manual_figures/layer3.png){#fig:layer3}
 
 The center is given as a two-element tuple of floats. Changing the
 center does not affect grid indices: For each of the three layers in
-Fig. [2.3](#fig:layer3){reference-type="ref" reference="fig:layer3"},
+Fig. {@fig:layer3},
 grid indices run from 0 to 4 through columns and rows, respectively,
 even though elements in these three layers have different positions in
 the global coordinate system.
@@ -1231,8 +188,7 @@
 
 -   the extent shall be centered about $y=0$.
 
-From Eq. [\[eq:dx\_dy\_extent\]](#eq:dx_dy_extent){reference-type="ref"
-reference="eq:dx_dy_extent"}, we see that the extent of the layer must
+From Eq. {@eq:dx_dy_extent}, we see that the extent of the layer must
 be $(n_c d, n_r d)$. We now need to find the coordinates $(c_x,
 c_y)$ of the center of the layer. To place the left edge of the extent
 at $x=0$, we must place the center of the layer at $c_x=n_c d / 2$ along
@@ -1240,363 +196,17 @@
 the layer is to be centered about $y=0$, we have $c_y=0$. Thus, the
 center coordinates are $(n_c d/2, 0)$. The layer is created with the
 following code and shown in
-Fig. [2.4](#fig:layer3a){reference-type="ref" reference="fig:layer3a"}:
+Fig. {@fig:layer3a}:
 
-``` {.python linerange="layer3a-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer3a-end
 ```
 
 ![Layer with $n_c=5$ rows and $n_r=3$ columns, spacing $d=0.1$ and the
 left edge of the extent at $x=0$, centered about the $y$-axis. The cross
 marks the point on the extent placed at the origin $(0,0)$, the circle
-the center of the layer.[]{label="fig:layer3a"}](layer3a){#fig:layer3a
-width="0.5\linewidth"}
+the center of the layer.](user_manual_figures/layer3a.png){#fig:layer3a}
+
 
 Free layers {#sec:freelayer}
 -----------
@@ -1607,359 +217,13 @@
 50 `iaf_psc_alpha` neurons uniformly distributed in a layer with extent
 $1\times 1$, i.e., spanning the square $[-0.5,0.5]\times[-0.5,0.5]$:
 
-``` {.python linerange="layer4-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer4-end
 ```
 
 ![A free layer with 50 elements uniformly distributed in an extent of
-size $1\times 1$.[]{label="fig:layer4"}](layer4){#fig:layer4
-width="0.5\linewidth"}
+size $1\times 1$.](user_manual_figures/layer4.png){#fig:layer4}
+
 
 Note the following points:
 
@@ -1992,360 +256,13 @@
 section may be easily extended with another component in the coordinates
 for the positions:
 
-``` {.python linerange="layer4_3d-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer4_3d-end
 ```
 
 ![A free 3D layer with 200 elements uniformly distributed in an extent
-of size $1\times 1\times 1$.](layer4_3d){width="0.5\linewidth"}
+of size $1\times 1\times 1$.](user_manual_figures/layer4_3d.png){#fig:layer4_3d}
 
-[\[fig:layer4\_3d\]]{#fig:layer4_3d label="fig:layer4_3d"}
 
 Periodic boundary conditions {#sec:periodic}
 ----------------------------
@@ -2355,369 +272,22 @@
 significant proportion of neurons in a model network is close to the
 edges of the network with fewer neighbors than nodes properly inside the
 network. In the $5\times 5$-layer in
-Fig. [2.1](#fig:layer1){reference-type="ref" reference="fig:layer1"},
+Fig. {@fig:layer1},
 e.g., 16 out of 25 nodes form the border of the layer.
 
 One common approach to reducing the effect of boundaries on simulations
 is to introduce *periodic boundary conditions*, so that the rightmost
 elements on a grid are considered nearest neighbors to the leftmost
 elements, and the topmost to the bottommost. The flat layer becomes the
-surface of a torus. Fig. [2.6](#fig:player){reference-type="ref"
-reference="fig:player"} illustrates this for a one-dimensional layer,
+surface of a torus. Fig. {@fig:player} illustrates this for a one-dimensional layer,
 which turns from a line to a ring upon introduction of periodic boundary
 conditions.
 
 You specify periodic boundary conditions for a layer using the
 dictionary entry `edge_wrap`:
 
-``` {.python linerange="player-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines player-end
 ```
 
 ![Top left: Layer with single row and five columns without periodic
@@ -2727,8 +297,7 @@
 conditions. Note that the element at $(2,0)$ now is a nearest neighbor
 to the element at $(-2,0)$. Right: Layer with periodic boundary
 condition arranged on a circle to illustrate neighborhood
-relationships.[]{label="fig:player"}](player){#fig:player
-width="0.8\linewidth"}
+relationships.](user_manual_figures/player.png){#fig:player}
 
 Note that the longest possible distance between two elements in a layer
 without periodic boundary conditions is
@@ -2753,537 +322,13 @@
 -   The status dictionary of a layer has a `'topology'` entry describing
     the layer properties (`l` is the layer created above):
 
-    ``` {.python linerange="layer1s-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # layers.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # Run as python layers.py > layers.log
-
-    import matplotlib.pyplot as plt
-    import nest
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(1234567)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_axisbelow(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer1 #}
-    import nest.topology as tp
-
-    l = tp.CreateLayer({'rows': 5,
-                        'columns': 5,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-    ax = fig.gca()
-    tx = []
-    for r in range(5):
-        tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                          horizontalalignment='center',
-                          verticalalignment='center'))
-        tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                          horizontalalignment='center',
-                          verticalalignment='center'))
-
-    # For bbox_extra_artists, see
-    # https://github.com/matplotlib/matplotlib/issues/351
-    plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-                bbox_extra_artists=tx)
-
-    print("#{ layer1s.log #}")
-    #{ layer1s #}
-    print(nest.GetStatus(l)[0]['topology'])
-    #{ end #}
-    print("#{ end.log #}")
-
-    print("#{ layer1p.log #}")
-    #{ layer1p #}
-    nest.PrintNetwork(depth=3)
-    #{ end #}
-    print("#{ end.log #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer2 #}
-    l = tp.CreateLayer({'rows': 5,
-                        'columns': 5,
-                        'extent': [2.0, 0.5],
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-    ax = fig.gca()
-    tx = []
-
-    for r in range(5):
-        tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                                 horizontalalignment='center',
-                                 verticalalignment='center'))
-        tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                                 horizontalalignment='center',
-                                 verticalalignment='center'))
-
-    # See https://github.com/matplotlib/matplotlib/issues/351
-    plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-                bbox_extra_artists=tx)
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer3 #}
-    l1 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha'})
-    l2 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha',
-                         'center': [-1., 1.]})
-    l3 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha',
-                         'center': [1.5, 0.5]})
-    #{ end #}
-
-    fig = tp.PlotLayer(l1, nodesize=50)
-    tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-    tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-    beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-                   xticks=np.arange(-1.4, 2.05, 0.2),
-                   yticks=np.arange(-0.4, 1.45, 0.2))
-
-    plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer3a #}
-    nc, nr = 5, 3
-    d = 0.1
-    l = tp.CreateLayer({'columns': nc,
-                        'rows': nr,
-                        'elements': 'iaf_psc_alpha',
-                        'extent': [nc * d, nr * d],
-                        'center': [nc * d / 2., 0.]})
-
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=100)
-    plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-    plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-             zorder=100)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xticks=np.arange(0., 0.501, 0.05),
-                   yticks=np.arange(-0.15, 0.151, 0.05),
-                   xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-    plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer4 #}
-    import numpy as np
-
-    pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-           for j in range(50)]
-    l = tp.CreateLayer({'positions': pos,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-                   xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-    plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer4_3d #}
-    import numpy as np
-
-    pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-            np.random.uniform(-0.5, 0.5)] for j in range(200)]
-    l = tp.CreateLayer({'positions': pos,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-
-    plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ player #}
-    lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                         'elements': 'iaf_psc_alpha',
-                         'edge_wrap': True})
-    #{ end #}
-
-    # fake plot with layer on line and circle
-    clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-    fig = plt.figure()
-    ax1 = fig.add_subplot(221)
-    ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-    ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-    ax1.set_xlim([0, 6])
-    ax1.set_ylim([-0.5, 1.25])
-    ax1.set_aspect('equal', 'box')
-    ax1.set_xticks([])
-    ax1.set_yticks([])
-    for j in range(1, 6):
-        ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-                 horizontalalignment='center', verticalalignment='bottom')
-
-    ax1a = fig.add_subplot(223)
-    ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-    ax1a.scatter(range(1, 6), [0] * 5, s=200,
-                 c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-    ax1a.set_xlim([0, 6])
-    ax1a.set_ylim([-0.5, 1.25])
-    ax1a.set_aspect('equal', 'box')
-    ax1a.set_xticks([])
-    ax1a.set_yticks([])
-    for j in range(1, 6):
-        ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-                  horizontalalignment='center', verticalalignment='bottom')
-
-    ax2 = fig.add_subplot(122)
-    phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-    r = 5. / (2 * np.pi)
-    ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-    phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-    ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-                c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-    ax2.set_xlim([-1.3, 1.3])
-    ax2.set_ylim([-1.2, 1.2])
-    ax2.set_aspect('equal', 'box')
-    ax2.set_xticks([])
-    ax2.set_yticks([])
-    for j in range(5):
-        ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-                 str('(%d,0)' % (j + 1 - 3)),
-                 horizontalalignment='center', verticalalignment='center')
-
-    plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer6 #}
-    l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                        'elements': ['iaf_cond_alpha',
-                                     'poisson_generator']})
-    #{ end #}
-
-    print("#{ layer6 #}")
-    nest.PrintNetwork(depth=3)
-    print("#{ end #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer7 #}
-    l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                        'elements': ['iaf_cond_alpha', 10,
-                                     'poisson_generator',
-                                     'noise_generator', 2]})
-    #{ end #}
-
-    print("#{ layer7 #}")
-    nest.PrintNetwork(depth=3)
-    print("#{ end #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer10 #}
-    for lyr in ['L23', 'L4', 'L56']:
-        nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-        nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-    l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                        'elements': ['L23pyr', 3, 'L23in',
-                                     'L4pyr', 3, 'L4in',
-                                     'L56pyr', 3, 'L56in']})
-    #{ end #}
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ vislayer #}
-    l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 0.4}},
-                'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-    tp.ConnectLayers(l, l, conndict)
-    fig = tp.PlotLayer(l, nodesize=80)
-    ctr = tp.FindCenterElement(l)
-    tp.PlotTargets(ctr, l, fig=fig,
-                   mask=conndict['mask'], kernel=conndict['kernel'],
-                   src_size=250, tgt_color='red', tgt_size=20,
-                   kernel_color='green')
-    #{ end #}
-    plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
-    ```
-
-    ``` {linerange="layer1s.log-end.log" breaklines="true" breakatwhitespace="true"}
-    [INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:238 @ Network::create_rngs_] : Creating default RNGs
-    [INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:284 @ Network::create_grng_] : Creating new default global RNG
-
-                  -- N E S T --
-      Copyright (C) 2004 The NEST Initiative
-
-     Version: 
-     Built: Nov  6 2018 14:20:01
-
-     This program is provided AS IS and comes with
-     NO WARRANTY. See the file LICENSE for details.
-
-     Problems or suggestions?
-       Visit http://www.nest-simulator.org
-
-     Type 'nest.help()' to find out more about NEST.
-
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer1s.log #}
-    {'center': (0.0, 0.0), 'columns': 5, 'depth': 1, 'edge_wrap': False, 'extent': (1.0, 1.0), 'rows': 5}
-    #{ end.log #}
-    #{ layer1p.log #}
-    +-[0] root dim=[1 25]
-       |
-       +-[1] topology_layer_grid dim=[25]
-          |
-          +-[1]...[25] iaf_psc_alpha
-          
-    #{ end.log #}
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer6 #}
-    +-[0] root dim=[1 4]
-       |
-       +-[1] topology_layer_grid dim=[4]
-          |
-          +-[1]...[2] iaf_cond_alpha
-          +-[3]...[4] poisson_generator
-          
-    #{ end #}
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer7 #}
-    +-[0] root dim=[1 26]
-       |
-       +-[1] topology_layer_grid dim=[26]
-          |
-          +-[1]...[20] iaf_cond_alpha
-          +-[21]...[22] poisson_generator
-          +-[23]...[26] noise_generator
-          
-    #{ end #}
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
+```
+     MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer1s-end
+```
 
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    ```
+```
+     MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.log lines layer1s.log-end.log
+```
 
     The `'topology'` entry is read-only.
 
@@ -3291,537 +336,13 @@
     the elements of any subnet. You will notice this when printing a
     network with a Topology layer:
 
-    ``` {.python linerange="layer1p-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # layers.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # Run as python layers.py > layers.log
-
-    import matplotlib.pyplot as plt
-    import nest
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(1234567)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_axisbelow(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer1 #}
-    import nest.topology as tp
-
-    l = tp.CreateLayer({'rows': 5,
-                        'columns': 5,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-    ax = fig.gca()
-    tx = []
-    for r in range(5):
-        tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                          horizontalalignment='center',
-                          verticalalignment='center'))
-        tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                          horizontalalignment='center',
-                          verticalalignment='center'))
-
-    # For bbox_extra_artists, see
-    # https://github.com/matplotlib/matplotlib/issues/351
-    plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-                bbox_extra_artists=tx)
-
-    print("#{ layer1s.log #}")
-    #{ layer1s #}
-    print(nest.GetStatus(l)[0]['topology'])
-    #{ end #}
-    print("#{ end.log #}")
-
-    print("#{ layer1p.log #}")
-    #{ layer1p #}
-    nest.PrintNetwork(depth=3)
-    #{ end #}
-    print("#{ end.log #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer2 #}
-    l = tp.CreateLayer({'rows': 5,
-                        'columns': 5,
-                        'extent': [2.0, 0.5],
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-    ax = fig.gca()
-    tx = []
-
-    for r in range(5):
-        tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                                 horizontalalignment='center',
-                                 verticalalignment='center'))
-        tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                                 horizontalalignment='center',
-                                 verticalalignment='center'))
-
-    # See https://github.com/matplotlib/matplotlib/issues/351
-    plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-                bbox_extra_artists=tx)
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer3 #}
-    l1 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha'})
-    l2 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha',
-                         'center': [-1., 1.]})
-    l3 = tp.CreateLayer({'rows': 5,
-                         'columns': 5,
-                         'elements': 'iaf_psc_alpha',
-                         'center': [1.5, 0.5]})
-    #{ end #}
-
-    fig = tp.PlotLayer(l1, nodesize=50)
-    tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-    tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-    beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-                   xticks=np.arange(-1.4, 2.05, 0.2),
-                   yticks=np.arange(-0.4, 1.45, 0.2))
-
-    plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer3a #}
-    nc, nr = 5, 3
-    d = 0.1
-    l = tp.CreateLayer({'columns': nc,
-                        'rows': nr,
-                        'elements': 'iaf_psc_alpha',
-                        'extent': [nc * d, nr * d],
-                        'center': [nc * d / 2., 0.]})
-
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=100)
-    plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-    plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-             zorder=100)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xticks=np.arange(0., 0.501, 0.05),
-                   yticks=np.arange(-0.15, 0.151, 0.05),
-                   xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-    plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer4 #}
-    import numpy as np
-
-    pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-           for j in range(50)]
-    l = tp.CreateLayer({'positions': pos,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-    beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-                   xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-                   xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-    plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer4_3d #}
-    import numpy as np
-
-    pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-            np.random.uniform(-0.5, 0.5)] for j in range(200)]
-    l = tp.CreateLayer({'positions': pos,
-                        'elements': 'iaf_psc_alpha'})
-    #{ end #}
-
-    fig = tp.PlotLayer(l, nodesize=50)
-
-    plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ player #}
-    lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                         'elements': 'iaf_psc_alpha',
-                         'edge_wrap': True})
-    #{ end #}
-
-    # fake plot with layer on line and circle
-    clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-    fig = plt.figure()
-    ax1 = fig.add_subplot(221)
-    ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-    ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-    ax1.set_xlim([0, 6])
-    ax1.set_ylim([-0.5, 1.25])
-    ax1.set_aspect('equal', 'box')
-    ax1.set_xticks([])
-    ax1.set_yticks([])
-    for j in range(1, 6):
-        ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-                 horizontalalignment='center', verticalalignment='bottom')
-
-    ax1a = fig.add_subplot(223)
-    ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-    ax1a.scatter(range(1, 6), [0] * 5, s=200,
-                 c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-    ax1a.set_xlim([0, 6])
-    ax1a.set_ylim([-0.5, 1.25])
-    ax1a.set_aspect('equal', 'box')
-    ax1a.set_xticks([])
-    ax1a.set_yticks([])
-    for j in range(1, 6):
-        ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-                  horizontalalignment='center', verticalalignment='bottom')
-
-    ax2 = fig.add_subplot(122)
-    phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-    r = 5. / (2 * np.pi)
-    ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-    phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-    ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-                c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-    ax2.set_xlim([-1.3, 1.3])
-    ax2.set_ylim([-1.2, 1.2])
-    ax2.set_aspect('equal', 'box')
-    ax2.set_xticks([])
-    ax2.set_yticks([])
-    for j in range(5):
-        ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-                 str('(%d,0)' % (j + 1 - 3)),
-                 horizontalalignment='center', verticalalignment='center')
-
-    plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer6 #}
-    l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                        'elements': ['iaf_cond_alpha',
-                                     'poisson_generator']})
-    #{ end #}
-
-    print("#{ layer6 #}")
-    nest.PrintNetwork(depth=3)
-    print("#{ end #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer7 #}
-    l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                        'elements': ['iaf_cond_alpha', 10,
-                                     'poisson_generator',
-                                     'noise_generator', 2]})
-    #{ end #}
-
-    print("#{ layer7 #}")
-    nest.PrintNetwork(depth=3)
-    print("#{ end #}")
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ layer10 #}
-    for lyr in ['L23', 'L4', 'L56']:
-        nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-        nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-    l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                        'elements': ['L23pyr', 3, 'L23in',
-                                     'L4pyr', 3, 'L4in',
-                                     'L56pyr', 3, 'L56in']})
-    #{ end #}
-
-    # --------------------------------------------------
-
-    nest.ResetKernel()
-
-    #{ vislayer #}
-    l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 0.4}},
-                'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-    tp.ConnectLayers(l, l, conndict)
-    fig = tp.PlotLayer(l, nodesize=80)
-    ctr = tp.FindCenterElement(l)
-    tp.PlotTargets(ctr, l, fig=fig,
-                   mask=conndict['mask'], kernel=conndict['kernel'],
-                   src_size=250, tgt_color='red', tgt_size=20,
-                   kernel_color='green')
-    #{ end #}
-    plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
-    ```
-
-    ``` {linerange="layer1p.log-end.log"}
-    [INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:238 @ Network::create_rngs_] : Creating default RNGs
-    [INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:284 @ Network::create_grng_] : Creating new default global RNG
-
-                  -- N E S T --
-      Copyright (C) 2004 The NEST Initiative
-
-     Version: 
-     Built: Nov  6 2018 14:20:01
-
-     This program is provided AS IS and comes with
-     NO WARRANTY. See the file LICENSE for details.
-
-     Problems or suggestions?
-       Visit http://www.nest-simulator.org
-
-     Type 'nest.help()' to find out more about NEST.
-
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer1s.log #}
-    {'center': (0.0, 0.0), 'columns': 5, 'depth': 1, 'edge_wrap': False, 'extent': (1.0, 1.0), 'rows': 5}
-    #{ end.log #}
-    #{ layer1p.log #}
-    +-[0] root dim=[1 25]
-       |
-       +-[1] topology_layer_grid dim=[25]
-          |
-          +-[1]...[25] iaf_psc_alpha
-          
-    #{ end.log #}
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:53 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer6 #}
-    +-[0] root dim=[1 4]
-       |
-       +-[1] topology_layer_grid dim=[4]
-          |
-          +-[1]...[2] iaf_cond_alpha
-          +-[3]...[4] poisson_generator
-          
-    #{ end #}
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    #{ layer7 #}
-    +-[0] root dim=[1 26]
-       |
-       +-[1] topology_layer_grid dim=[26]
-          |
-          +-[1]...[20] iaf_cond_alpha
-          +-[21]...[22] poisson_generator
-          +-[23]...[26] noise_generator
-          
-    #{ end #}
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
-
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-
-    Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-        Models will be cleared and parameters reset.
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Deleting existing random number generators
-
-    Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-        Creating default RNGs
+```
+     MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer1p-end
+```
 
-    Feb 27 11:04:54 Network::create_grng_ [Info]: 
-        Creating new default global RNG
-    ```
+```
+     MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.log lines layer1p.log-end.log
+```
 
     The $5\times 5$ layer created above appears here as a
     `topology_layer_grid` subnet of 25 `iaf_psc_alpha` neurons. Only
@@ -3843,536 +364,12 @@
 `PrintNetwork()` compact) in which each element consists of one
 `'iaf_cond_alpha'` and one `'poisson_generator'` node
 
-``` {.python linerange="layer6-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
-```
-
-``` {linerange="layer6-end"}
-[INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:238 @ Network::create_rngs_] : Creating default RNGs
-[INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:284 @ Network::create_grng_] : Creating new default global RNG
-
-              -- N E S T --
-  Copyright (C) 2004 The NEST Initiative
-
- Version: 
- Built: Nov  6 2018 14:20:01
-
- This program is provided AS IS and comes with
- NO WARRANTY. See the file LICENSE for details.
-
- Problems or suggestions?
-   Visit http://www.nest-simulator.org
-
- Type 'nest.help()' to find out more about NEST.
-
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer1s.log #}
-{'center': (0.0, 0.0), 'columns': 5, 'depth': 1, 'edge_wrap': False, 'extent': (1.0, 1.0), 'rows': 5}
-#{ end.log #}
-#{ layer1p.log #}
-+-[0] root dim=[1 25]
-   |
-   +-[1] topology_layer_grid dim=[25]
-      |
-      +-[1]...[25] iaf_psc_alpha
-      
-#{ end.log #}
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer6 #}
-+-[0] root dim=[1 4]
-   |
-   +-[1] topology_layer_grid dim=[4]
-      |
-      +-[1]...[2] iaf_cond_alpha
-      +-[3]...[4] poisson_generator
-      
-#{ end #}
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer7 #}
-+-[0] root dim=[1 26]
-   |
-   +-[1] topology_layer_grid dim=[26]
-      |
-      +-[1]...[20] iaf_cond_alpha
-      +-[21]...[22] poisson_generator
-      +-[23]...[26] noise_generator
-      
-#{ end #}
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer6-end
+```
 
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.log lines layer6-end
 ```
 
 The network consist of one `topology_layer_grid` with four elements: two
@@ -4384,536 +381,12 @@
 You can create network elements with several nodes of each type by
 following a model name with the number of nodes to be created:
 
-``` {.python linerange="layer7-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
-```
-
-``` {linerange="layer7-end"}
-[INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:238 @ Network::create_rngs_] : Creating default RNGs
-[INFO] [2019.2.27 11:4:53 /home/mitchell/fzj/documentation_project/nest_216/nest_download/nest-simulator-2.16.0/nestkernel/rng_manager.cpp:284 @ Network::create_grng_] : Creating new default global RNG
-
-              -- N E S T --
-  Copyright (C) 2004 The NEST Initiative
-
- Version: 
- Built: Nov  6 2018 14:20:01
-
- This program is provided AS IS and comes with
- NO WARRANTY. See the file LICENSE for details.
-
- Problems or suggestions?
-   Visit http://www.nest-simulator.org
-
- Type 'nest.help()' to find out more about NEST.
-
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer1s.log #}
-{'center': (0.0, 0.0), 'columns': 5, 'depth': 1, 'edge_wrap': False, 'extent': (1.0, 1.0), 'rows': 5}
-#{ end.log #}
-#{ layer1p.log #}
-+-[0] root dim=[1 25]
-   |
-   +-[1] topology_layer_grid dim=[25]
-      |
-      +-[1]...[25] iaf_psc_alpha
-      
-#{ end.log #}
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:53 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:53 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:53 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer6 #}
-+-[0] root dim=[1 4]
-   |
-   +-[1] topology_layer_grid dim=[4]
-      |
-      +-[1]...[2] iaf_cond_alpha
-      +-[3]...[4] poisson_generator
-      
-#{ end #}
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-#{ layer7 #}
-+-[0] root dim=[1 26]
-   |
-   +-[1] topology_layer_grid dim=[26]
-      |
-      +-[1]...[20] iaf_cond_alpha
-      +-[21]...[22] poisson_generator
-      +-[23]...[26] noise_generator
-      
-#{ end #}
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
-
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
-
-Feb 27 11:04:54 ModelManager::clear_models_ [Info]: 
-    Models will be cleared and parameters reset.
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Deleting existing random number generators
-
-Feb 27 11:04:54 Network::create_rngs_ [Info]: 
-    Creating default RNGs
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer7-end
+```
 
-Feb 27 11:04:54 Network::create_grng_ [Info]: 
-    Creating new default global RNG
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.log lines layer7-end
 ```
 
 In this case, each layer element consists of 10 `iaf_cond_alpha`
@@ -4957,354 +430,8 @@
 recommended approach is to create different models for the neurons in
 each layer and then define the microcolumn as one composite element:
 
-``` {.python linerange="layer10-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/layers.py lines layer10-end
 ```
 
 We will discuss in Chapter [3.1](#sec:conn_basics){reference-type="ref"
@@ -5454,652 +581,10 @@
 targets. If no mask is given, all neurons in the respective layer are
 considered sources or targets.
 
-Here is a simple example, cf. [3.1](#fig:conn1){reference-type="ref"
-reference="fig:conn1"}:
-
-``` {.python linerange="conn1-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
+Here is a simple example, cf. {@fig:conn1}
 
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn1-end
 ```
 
 ![Left: Minimal connection example from a layer onto itself using a
@@ -6113,7 +598,7 @@
 now has 15 targets, too, but they are spread across the corners of the
 layer. If we wrapped the layer to a torus, they would form a $5\times 3$
 rectangle centered on the node at
-$(4,5)$.[]{label="fig:conn1"}](conn1){#fig:conn1 width="0.9\linewidth"}
+$(4,5)$.](user_manual_figures/conn1.png){#fig:conn1}
 
 In this example, layer `l` is both source and target layer. Connection
 type is divergent, i.e., for each node in the layer we choose targets
@@ -6121,7 +606,7 @@
 no connection kernel is specified, we connect to all nodes within the
 mask. Note the effect of normal and periodic boundary conditions on the
 connections created for different nodes in the layer, as illustrated in
-Fig. [3.1](#fig:conn1){reference-type="ref" reference="fig:conn1"}.
+Fig. {@fig:conn1}.
 
 Mapping source and target layers {#sec:mapping}
 --------------------------------
@@ -6167,8 +652,7 @@
 
 Topology currently provides four types of masks usable for 2-dimensional
 free and grid-based layers. They are illustrated in
-Fig. [\[fig:conn2\_a\]](#fig:conn2_a){reference-type="ref"
-reference="fig:conn2_a"}. The masks are
+Fig. {@fig:conn2_a}. The masks are
 
 Rectangular
 
@@ -6176,1300 +660,18 @@
     specified by its lower left and upper right corners, measured in the
     same unit as element coordinates. Example:
 
-    ``` {.python linerange="conn2r-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2r-end
+```
 
 Circular
 
 :   All nodes within a circle are connected. The area is specified by
     its radius.
 
-    ``` {.python linerange="conn2c-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2c-end
+```
 
 Doughnut
 
@@ -7477,650 +679,9 @@
     nodes *on* the inner circle are not connected. The area is specified
     by the radii of the inner and outer circles.
 
-    ``` {.python linerange="conn2d-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2d-end
+```
 
 Elliptical
 
@@ -8128,4561 +689,66 @@
     its major and minor axis. Note that this mask was added to NEST with
     NEST 2.14.
 
-    ``` {.python linerange="conn2e-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2e-end
+```
 
 ![Masks for 2D layers. For all mask types, the driver node is marked by
 a wide light-red circle, the selected pool nodes by red dots and the
 masks by red lines. From left to right, top to bottom: rectangular,
 circular, doughnut and elliptical masks centered about the driver
-node.](conn2_a){width="0.9\linewidth"}
+node.](user_manual_figures/conn2_a.png){#fig:conn2_a}
 
-[\[fig:conn2\_a\]]{#fig:conn2_a label="fig:conn2_a"}
 
 By default, the masks are centered about the position of the driver
 node, mapped into the pool layer. You can change the location of the
 mask relative to the driver node by specifying an `'anchor'` entry in
 the mask dictionary. The anchor is a 2D vector specifying the location
 of the mask center relative to the driver node, as in the following
-examples (cf. Fig. [\[fig:conn2\_b\]](#fig:conn2_b){reference-type="ref"
-reference="fig:conn2_b"}):
-
-``` {.python linerange="conn2ro-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-``` {.python linerange="conn2co-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-``` {.python linerange="conn2do-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-``` {.python linerange="conn2eo-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
+examples (cf. Fig. {@fig:conn2_b}).
 
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
 
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2ro-end
+```
 
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2co-end
+```
 
-# ----------------------------
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2do-end
+```
 
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
 ```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2eo-end
+```
+
 
 ![The same masks as in
-Fig. [\[fig:conn2\_a\]](#fig:conn2_a){reference-type="ref"
-reference="fig:conn2_a"}, but centered about $(-1.5,-1.5)$, $(-2,0)$,
+Fig. {@fig:conn2_a}, but centered about $(-1.5,-1.5)$, $(-2,0)$,
 $(1.5,1.5)$ and $(2, -1)$, respectively, using the `'anchor'`
-parameter.](conn2_b){width="0.9\linewidth"}
+parameter.](user_manual_figures/conn2_b.png){#fig:conn2_b}
 
-[\[fig:conn2\_b\]]{#fig:conn2_b label="fig:conn2_b"}
-
-It is, as of NEST 2.16, possible to rotate the $\textbf{rectangular}$
 and $\textbf{elliptical}$ masks, see
-Fig [\[fig:conn2\_c\]](#fig:conn2_c){reference-type="ref"
-reference="fig:conn2_c"}. To do so, add an `'azimuth_angle'` entry in
+Fig {@fig:conn2_b}. To do so, add an `'azimuth_angle'` entry in
 the specific mask dictionary. The `azimuth_angle` is measured in degrees
 and is the rotational angle from the x-axis to the y-axis.
 
-``` {.python linerange="conn2rr-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2rr-end
+```
 
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-``` {.python linerange="conn2er-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+ MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn2er-end
 ```
 
 ![Rotated rectangle and elliptical mask from
-Fig. [\[fig:conn2\_a\]](#fig:conn2_a){reference-type="ref"
-reference="fig:conn2_a"} and
-Fig. [\[fig:conn2\_b\]](#fig:conn2_b){reference-type="ref"
-reference="fig:conn2_b"}, where the rectangle mask is rotated
+Fig. {@fig:conn2_a} and
+Fig. {@fig:conn2_b}, where the rectangle mask is rotated
 $120^\circ$ and the elliptical mask is rotated
-$45^\circ$.](conn2_c){width="0.9\linewidth"}
+$45^\circ$.](user_manual_figures/conn2_c.png){#fig:conn2_c}
 
-[\[fig:conn2\_c\]]{#fig:conn2_c label="fig:conn2_c"}
 
 ### Masks for 3D layers {#sec:3d_masks}
 
@@ -12694,10594 +760,310 @@
     specified by its lower left and upper right corners, measured in the
     same unit as element coordinates. Example:
 
-    ``` {.python linerange="conn_3d_a-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn_3d_a-end
+```
 
 Spherical
 
 :   All nodes within a sphere are connected. The area is specified by
     its radius.
 
-    ``` {.python linerange="conn_3d_b-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn_3d_b-end
+```
 
 Ellipsoidal
 
 :   All nodes within an ellipsoid are connected. The area is specified
     by its major, minor, and polar axis. This mask has been part of NEST
-    since NEST 2.14.
-
-    ``` {.python linerange="conn_3d_c-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-As in the 2D case, you can change the location of the mask relative to
-the driver node by specifying a 3D vector in the `'anchor'` entry in the
-mask dictionary. If you want to rotate the box or ellipsoidal masks, you
-can add an `'azimuth_angle'` entry in the specific mask dictionary for
-rotation from the x-axis towards the y-axis about the z-axis, or an
-`'polar_angle'` entry, specifying the rotation angle in degrees from the
-z-axis about the (possibly rotated) x axis, from the (possibly rotated)
-y-axis. You can specify both at once of course. If both are specified,
-we first rotate about the z-axis and then about the new x-axis. NEST
-currently do not support rotation in all three directions, the rotation
-from the y-axis about the (possibly rotated) z-axis, from the (possibly
-rotated) x-axis is missing.
-
-![Masks for 3D layers. For all mask types, the driver node is marked by
-a wide light-red circle, the selected pool nodes by red dots and the
-masks by red lines. From left to right: box and spherical masks centered
-about the driver node.](conn_3d){width="0.9\linewidth"}
-
-[\[fig:conn\_3d\]]{#fig:conn_3d label="fig:conn_3d"}
-
-### Masks for grid-based layers {#sec:grid_masks}
-
-Grid-based layers can be connected using rectangular *grid masks*. For
-these, you specify the size of the mask not by lower left and upper
-right corner coordinates, but give their size in rows and columns, as in
-this example:
-
-``` {.python linerange="conn3-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-The resulting connections are shown in
-Fig. [3.2](#fig:conn3){reference-type="ref" reference="fig:conn3"}. By
-default the top-left corner of a grid mask, i.e., the grid mask element
-with grid index $[0,0]$[^4], is aligned with the driver node. You can
-change this alignment by specifying an *anchor* for the mask:
-
-``` {.python linerange="conn3c-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-You can even place the anchor outside the mask:
-
-``` {.python linerange="conn3x-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
-```
-
-The resulting connection patterns are shown in
-Fig. [3.2](#fig:conn3){reference-type="ref" reference="fig:conn3"}.
-
-![Grid masks for connections between grid-based layers. Left:
-$5\times 3$ mask with default alignment at upper left corner. Center:
-Same mask, but anchored to center node at grid index $[1,2]$. Right:
-Same mask, but anchor to the upper left of the mask at grid index
-$[-1,2]$.[]{label="fig:conn3"}](conn3){#fig:conn3 width="0.9\linewidth"}
-
-Connections specified using grid masks are generated more efficiently
-than connections specified using other mask types.
-
-Note the following:
-
--   Grid-based masks are applied by considering grid indices. The
-    position of nodes in physical coordinates is ignored.
-
--   In consequence, grid-based masks should only be used between layers
-    with identical grid spacings.
-
--   The semantics of the `'anchor'` property for grid-based masks differ
-    significantly for general masks described in
-    Sec. [3.3.1](#sec:free_masks){reference-type="ref"
-    reference="sec:free_masks"}. For general masks, the anchor is the
-    center of the mask relative to the driver node. For grid-based
-    nodes, the anchor determines which mask element is aligned with the
-    driver element.
-
-Kernels {#sec:conn_kernels}
--------
-
-Many neuronal network models employ probabilistic connection rules.
-Topology supports probabilistic connections through *kernels*. A kernel
-is a function mapping the distance (or displacement) between a driver
-and a pool node to a connection probability. Topology then generates a
-connection according to this probability.
-
-Probabilistic connections can be generated in two different ways using
-Topology:
-
-Free probabilistic connections
-
-:   are the default. In this case, `ConnectLayers` considers each driver
-    node $D$ in turn. For each $D$, it evaluates the kernel for each
-    pool node $P$ within the mask and creates a connection according to
-    the resulting probability. This means in particular that *each
-    possible driver-pool pair is inspected exactly once* and that there
-    will be *at most one connection between each driver-pool pair*.
-
-Prescribed number of connections
-
-:   can be obtained by specifying the number of connections to create
-    per driver node. See
-    Sec. [3.7](#sec:prescribed_numbers){reference-type="ref"
-    reference="sec:prescribed_numbers"} for details.
-
-Available kernel functions are shown in
-Table [\[tab:kernels\]](#tab:kernels){reference-type="ref"
-reference="tab:kernels"}. More kernel functions may be created in a NEST
-extension module. This is covered in
-Chapter [5](#ch:extending){reference-type="ref"
-reference="ch:extending"}.
-
-  -------------------------------------------------------------------------------------------------------------------
-  Name            Parameters       Function
-  --------------- ---------------- ----------------------------------------------------------------------------------
-  constant                         constant $p\in[0,1]$
-
-  `linear`        `a`, `c`         $$p(d) = c + a d$$
-
-  `exponential`   `a`, `c`, `tau`  $$p(d) = c + a e^{-\frac{d}{\tau}}$$
-
-  `gaussian`      `p_center`,      $$p(d) = c + p_{\text{center}}  e^{-\frac{(d-\mu)^2}{2\sigma^2}}$$
-                  `sigma`, `mean`, 
-                  `c`              
-
-  `gaussian2D`    `p_center`,      $$p(d) = c + p_{\text{center}}
-                  `sigma_x`,       e^{-\frac{\frac{(d_x-\mu_x)^2}{\sigma_x^2}-\frac{(d_y-\mu_y)^2}{\sigma_y^2}
-                  `sigma_y`,                 +2\rho\frac{(d_x-\mu_x)(d_y-\mu_y)}{\sigma_x\sigma_y}}{2(1-\rho^2)}}$$
-                  `mean_x`,        
-                  `mean_y`,`rho`   
-                  `c`              
-
-  `gamma`         `kappa`, `theta` $$p(d) = \frac{d^{\kappa-1}e^{-\frac{d}{\theta}}}{\theta^\kappa\Gamma(\kappa)}$$
-
-  `uniform`       `min`, `max`     $p\in
-                                   [\text{min},\text{max})$ uniformly
-
-  `normal`        `mean`, `sigma`, $p \in [\text{min},\text{max})$ normal with given mean and $\sigma$
-                  `min`, `max`     
-
-  `lognormal`     `mu`, `sigma`,   $p \in [\text{min},\text{max})$ lognormal with given $\mu$ and $\sigma$
-                  `min`, `max`     
-  -------------------------------------------------------------------------------------------------------------------
-
-  : Functions currently available in the Topology module. $d$ is the
-  distance and $(d_x,d_y)$ the displacement. All functions can be used
-  to specify weights and delays, but only the constant and the
-  distance-dependent functions, i.e., all functions above the double
-  line, can be used as kernels. []{label="tab:kernels"}
-
-![Illustration of various kernel functions. Top left: constant kernel,
-$p=0.5$. Top center: Gaussian kernel, green dashed lines show $\sigma$,
-$2\sigma$, $3\sigma$. Top right: Same Gaussian kernel anchored at
-$(1.5,1.5)$. Bottom left: Same Gaussian kernel, but all $p<0.5$ treated
-as $p=0$. Bottom center:
-2D-Gaussian.[]{label="fig:conn4"}](conn4){#fig:conn4
-width="0.9\linewidth"}
-
-Several examples follow. They are illustrated in
-Fig. [3.3](#fig:conn4){reference-type="ref" reference="fig:conn4"}.
-
-Constant
-
-:   The simplest kernel is a fixed connection probability:
-
-    ``` {.python linerange="conn4cp-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-Gaussian
-
-:   This kernel is distance dependent. In the example, connection
-    probability is 1 for $d=0$ and falls off with a "standard deviation"
-    of $\sigma=1$:
-
-    ``` {.python linerange="conn4g-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-Eccentric Gaussian
-
-:   In this example, both kernel and mask have been moved using anchors:
-
-    ``` {.python linerange="conn4gx-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-    Note that the anchor for the kernel is specified inside the
-    dictionary containing the parameters for the Gaussian.
-
-Cut-off Gaussian
-
-:   In this example, all probabilities less than $0.5$ are set to zero:
-
-    ``` {.python linerange="conn4cut-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-2D Gaussian
-
-:   We conclude with an example using a two-dimensional Gaussian, i.e.,
-    a Gaussian with different widths in $x$- and $y-$ directions. This
-    kernel depends on displacement, not only on distance:
-
-    ``` {.python linerange="conn42d-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-Note that for pool layers with periodic boundary conditions, Topology
-always uses the shortest possible displacement vector from driver to
-pool neuron as argument to the kernel function.
-
-Weights and delays {#sec:conn_wd}
-------------------
-
-The functions presented in
-Table [\[tab:kernels\]](#tab:kernels){reference-type="ref"
-reference="tab:kernels"} can also be used to specify distance-dependent
-or randomized weights and delays for the connections created by
-`ConnectLayers`.
-
-Figure [3.4](#fig:conn5){reference-type="ref" reference="fig:conn5"}
-illustrates weights and delays generated using these functions with the
-following code examples. All examples use a "layer" of 51 nodes placed
-on a line; the line is centered about $(25,0)$, so that the leftmost
-node has coordinates $(0,0)$. The distance between neighboring elements
-is 1. The mask is rectangular, spans the entire layer and is centered
-about the driver node.
-
-Linear example
-
-:   
-
-    ------------------------------------------------------------------------
-
-    \
-
-    ``` {.python linerange="conn5lin-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-    fig = plt.figure()
-
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
-
-
-    fig = plt.figure()
-
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
-
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
-
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
-
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
-
-    Results are shown in the top panel of
-    Fig. [3.4](#fig:conn5){reference-type="ref" reference="fig:conn5"}.
-    Connection weights and delays are shown for the leftmost neuron as
-    driver. Weights drop linearly from $1$. From the node at $(20,0)$
-    on, the cutoff sets weights to 0. There are no connections to nodes
-    beyond $(25,0)$, since the mask extends only 25 units to the right
-    of the driver. Delays increase in a stepwise linear fashion, as NEST
-    requires delays to be multiples of the simulation resolution.
-
-Linear example with periodic boundary conditions
-
-:   
-
-    ------------------------------------------------------------------------
-
-    \
-
-    ``` {.python linerange="conn5linpbc-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
+    since NEST 2.14.
 
-    fig = plt.figure()
+```
+    MISSING SCRIPT CODE HERE! file: user_manual_scripts/connections.py lines conn_3d_c-end
+```
 
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+As in the 2D case, you can change the location of the mask relative to
+the driver node by specifying a 3D vector in the `'anchor'` entry in the
+mask dictionary. If you want to rotate the box or ellipsoidal masks, you
+can add an `'azimuth_angle'` entry in the specific mask dictionary for
+rotation from the x-axis towards the y-axis about the z-axis, or an
+`'polar_angle'` entry, specifying the rotation angle in degrees from the
+z-axis about the (possibly rotated) x axis, from the (possibly rotated)
+y-axis. You can specify both at once of course. If both are specified,
+we first rotate about the z-axis and then about the new x-axis. NEST
+currently do not support rotation in all three directions, the rotation
+from the y-axis about the (possibly rotated) z-axis, from the (possibly
+```
+rotated) x-axis is missing.
+```
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
+![Masks for 3D layers. For all mask types, the driver node is marked by
+a wide light-red circle, the selected pool nodes by red dots and the
+masks by red lines. From left to right: box and spherical masks centered
+about the driver node.](user_manual_figures/conn_3d.png){#fig:conn3d}
 
+### Masks for grid-based layers {#sec:grid_masks}
 
-    fig = plt.figure()
+Grid-based layers can be connected using rectangular *grid masks*. For
+these, you specify the size of the mask not by lower left and upper
+right corner coordinates, but give their size in rows and columns, as in
+this example:
 
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn3-end
+```
 
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
+The resulting connections are shown in
+Fig. {@fig:conn3}. By
+default the top-left corner of a grid mask, i.e., the grid mask element
+with grid index $[0,0]$[^4], is aligned with the driver node. You can
+change this alignment by specifying an *anchor* for the mask:
 
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn3c-end
+```
 
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
+You can even place the anchor outside the mask:
 
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn3x-end
+```
 
-    # -----------------------------------------------
+The resulting connection patterns are shown in
+Fig. {@fig:conn3}.
 
-    # free masks
+![Grid masks for connections between grid-based layers. Left:
+$5\times 3$ mask with default alignment at upper left corner. Center:
+Same mask, but anchored to center node at grid index $[1,2]$. Right:
+Same mask, but anchor to the upper left of the mask at grid index
+$[-1,2]$.](user_manual_figures/conn3.png){#fig:conn3}
 
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+Connections specified using grid masks are generated more efficiently
+than connections specified using other mask types.
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+Note the following:
 
-    Results are shown in the middle panel of
-    Fig. [3.4](#fig:conn5){reference-type="ref" reference="fig:conn5"}.
-    This example is identical to the previous, except that the (pool)
-    layer has periodic boundary conditions. Therefore, the left half of
-    the mask about the node at $(0,0)$ wraps back to the right half of
-    the layer and that node connects to all nodes in the layer.
+-   Grid-based masks are applied by considering grid indices. The
+    position of nodes in physical coordinates is ignored.
 
-Various functions
+-   In consequence, grid-based masks should only be used between layers
+    with identical grid spacings.
 
-:   
+-   The semantics of the `'anchor'` property for grid-based masks differ
+    significantly for general masks described in
+    Sec. [3.3.1](#sec:free_masks){reference-type="ref"
+    reference="sec:free_masks"}. For general masks, the anchor is the
+    center of the mask relative to the driver node. For grid-based
+    nodes, the anchor determines which mask element is aligned with the
+    driver element.
 
-    ------------------------------------------------------------------------
+Kernels {#sec:conn_kernels}
+-------
 
-    \
+Many neuronal network models employ probabilistic connection rules.
+Topology supports probabilistic connections through *kernels*. A kernel
+is a function mapping the distance (or displacement) between a driver
+and a pool node to a connection probability. Topology then generates a
+connection according to this probability.
 
-    ``` {.python linerange="conn5exp-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+Probabilistic connections can be generated in two different ways using
+Topology:
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
+Free probabilistic connections
 
-    fig = plt.figure()
+:   are the default. In this case, `ConnectLayers` considers each driver
+    node $D$ in turn. For each $D$, it evaluates the kernel for each
+    pool node $P$ within the mask and creates a connection according to
+    the resulting probability. This means in particular that *each
+    possible driver-pool pair is inspected exactly once* and that there
+    will be *at most one connection between each driver-pool pair*.
 
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+Prescribed number of connections
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
+:   can be obtained by specifying the number of connections to create
+    per driver node. See
+    Sec. [3.7](#sec:prescribed_numbers){reference-type="ref"
+    reference="sec:prescribed_numbers"} for details.
 
+Available kernel functions are shown in
+Table {@tbl:kernels}. More kernel functions may be created in a NEST
+extension module. This is covered in
+Chapter [5](#ch:extending){reference-type="ref"
+reference="ch:extending"}.
 
-    fig = plt.figure()
+  -------------------------------------------------------------------------------------------------------------------
+  Name            Parameters       Function
+  --------------- ---------------- ----------------------------------------------------------------------------------
+  constant                         constant $p\in[0,1]$
 
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
+  `linear`        `a`, `c`         $$p(d) = c + a d$$
 
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
+  `exponential`   `a`, `c`, `tau`  $$p(d) = c + a e^{-\frac{d}{\tau}}$$
 
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
+  `gaussian`      `p_center`,      $$p(d) = c + p_{\text{center}}  e^{-\frac{(d-\mu)^2}{2\sigma^2}}$$
+                  `sigma`, `mean`, 
+                  `c`              
 
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
+  `gaussian2D`    `p_center`,      $$p(d) = c + p_{\text{center}}
+                  `sigma_x`,       e^{-\frac{\frac{(d_x-\mu_x)^2}{\sigma_x^2}-\frac{(d_y-\mu_y)^2}{\sigma_y^2}
+                  `sigma_y`,                 +2\rho\frac{(d_x-\mu_x)(d_y-\mu_y)}{\sigma_x\sigma_y}}{2(1-\rho^2)}}$$
+                  `mean_x`,        
+                  `mean_y`,`rho`,   
+                  `c`              
 
+  `gamma`         `kappa`, `theta` $$p(d) = \frac{d^{\kappa-1}e^{-\frac{d}{\theta}}}{\theta^\kappa\Gamma(\kappa)}$$
 
-    # -----------------------------------------------
+  `uniform`       `min`, `max`     $p\in
+                                   [\text{min},\text{max})$ uniformly
 
-    # free masks
+  `normal`        `mean`, `sigma`, $p \in [\text{min},\text{max})$ normal with given mean and $\sigma$
+                  `min`, `max`     
 
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+  `lognormal`     `mu`, `sigma`,   $p \in [\text{min},\text{max})$ lognormal with given $\mu$ and $\sigma$
+                  `min`, `max`     
+  -------------------------------------------------------------------------------------------------------------------
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+  Table: Functions currently available in the Topology module. $d$ is the
+  distance and $(d_x,d_y)$ the displacement. All functions can be used
+  to specify weights and delays, but only the constant and the
+  distance-dependent functions, i.e., all functions above the double
+  line, can be used as kernels. {#tbl:kernels}
 
-    ``` {.python linerange="conn5gauss-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+![Illustration of various kernel functions. Top left: constant kernel,
+$p=0.5$. Top center: Gaussian kernel, green dashed lines show $\sigma$,
+$2\sigma$, $3\sigma$. Top right: Same Gaussian kernel anchored at
+$(1.5,1.5)$. Bottom left: Same Gaussian kernel, but all $p<0.5$ treated
+as $p=0$. Bottom center:
+2D-Gaussian.](user_manual_figures/conn4.png){#fig:conn4}
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
 
-    fig = plt.figure()
+Several examples follow. They are illustrated in
+Fig. {@fig:conn4}.
 
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+Constant
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
+:   The simplest kernel is a fixed connection probability:
 
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn4cp-end
+```
 
-    fig = plt.figure()
+Gaussian
 
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
+:   This kernel is distance dependent. In the example, connection
+    probability is 1 for $d=0$ and falls off with a "standard deviation"
+    of $\sigma=1$:
 
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn4g-end
+```
 
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
+Eccentric Gaussian
 
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
+:   In this example, both kernel and mask have been moved using anchors:
 
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn4gx-end
+```
 
-    # -----------------------------------------------
+    Note that the anchor for the kernel is specified inside the
+    dictionary containing the parameters for the Gaussian.
 
-    # free masks
+Cut-off Gaussian
 
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+:   In this example, all probabilities less than $0.5$ are set to zero:
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn4cut-end
+```
 
-    Results are shown in the bottom panel of
-    Fig. [3.4](#fig:conn5){reference-type="ref" reference="fig:conn5"}.
-    It shows linear, exponential and Gaussian weight functions for the
-    node at $(25,0)$.
+2D Gaussian
 
-Randomized weights and delays
+:   We conclude with an example using a two-dimensional Gaussian, i.e.,
+    a Gaussian with different widths in $x$- and $y-$ directions. This
+    kernel depends on displacement, not only on distance:
 
-:   
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn42d-end
+```
 
-    ------------------------------------------------------------------------
+Note that for pool layers with periodic boundary conditions, Topology
+always uses the shortest possible displacement vector from driver to
+pool neuron as argument to the kernel function.
 
-    \
+Weights and delays {#sec:conn_wd}
+------------------
 
-    ``` {.python linerange="conn5uniform-end"}
-    # -*- coding: utf-8 -*-
-    #
-    # connections.py
-    #
-    # This file is part of NEST.
-    #
-    # Copyright (C) 2004 The NEST Initiative
-    #
-    # NEST is free software: you can redistribute it and/or modify
-    # it under the terms of the GNU General Public License as published by
-    # the Free Software Foundation, either version 2 of the License, or
-    # (at your option) any later version.
-    #
-    # NEST is distributed in the hope that it will be useful,
-    # but WITHOUT ANY WARRANTY; without even the implied warranty of
-    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    # GNU General Public License for more details.
-    #
-    # You should have received a copy of the GNU General Public License
-    # along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-    # create connectivity figures for topology manual
-
-    import nest
-    import nest.topology as tp
-    import matplotlib.pyplot as plt
-    from mpl_toolkits.mplot3d.axes3d import Axes3D
-    import numpy as np
-
-    # seed NumPy RNG to ensure identical results for runs with random placement
-    np.random.seed(7654321)
-
-
-    def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                       xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-        """Assume either x and ylims/ticks given or none"""
-
-        top = nest.GetStatus(l)[0]['topology']
-        ctr = top['center']
-        ext = top['extent']
-
-        if xticks is None:
-            if 'rows' in top:
-                dx = float(ext[0]) / top['columns']
-                dy = float(ext[1]) / top['rows']
-                xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                    top['columns'])
-                yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                    top['rows'])
-
-        if xlim is None:
-            xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-                0] / 2. + dx / 2.]  # extra space so extent is visible
-            ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-        else:
-            ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-        ax = fig.gca()
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_aspect('equal', 'box')
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-        ax.grid(True)
-        ax.set_xlabel(xlabel)
-        ax.set_ylabel(ylabel)
-        return
-
-
-    def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                    xticks=range(-5, 6), yticks=range(-5, 6),
-                    xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=60)
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=20,
-                           kernel_color='green')
-
-        beautify_layer(layer, fig,
-                       xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                       xlabel='', ylabel='')
-        fig.gca().grid(False)
-
-
-    # -----------------------------------------------
-
-    # Simple connection
-
-    #{ conn1 #}
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    tp.ConnectLayers(l, l, conndict)
-    #{ end #}
-
-    fig = plt.figure()
-    fig.add_subplot(121)
-    conn_figure(fig, l, conndict,
-                targets=((tp.FindCenterElement(l), 'red'),
-                         (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-    # same another time, with periodic bcs
-    lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                           'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-    tp.ConnectLayers(lpbc, lpbc, conndict)
-    fig.add_subplot(122)
-    conn_figure(fig, lpbc, conndict, showmask=False,
-                targets=((tp.FindCenterElement(lpbc), 'red'),
-                         (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-    plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # free masks
-
-    def free_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+The functions presented in
+Table {@tbl:kernels} can also be used to specify distance-dependent
+or randomized weights and delays for the connections created by
+`ConnectLayers`.
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
+Figure {@fig:conn5}
+illustrates weights and delays generated using these functions with the
+following code examples. All examples use a "layer" of 51 nodes placed
+on a line; the line is centered about $(25,0)$, so that the leftmost
+node has coordinates $(0,0)$. The distance between neighboring elements
+is 1. The mask is rectangular, spans the entire layer and is centered
+about the driver node.
 
-    fig = plt.figure()
+Linear example
 
-    #{ conn2r #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]}}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0}}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.}}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2e #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.}}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2ro #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.]},
-                         'anchor': [-1.5, -1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 221, conndict)
-
-    #{ conn2co #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 2.0},
-                         'anchor': [-2.0, 0.0]}}
-    #{ end #}
-    free_mask_fig(fig, 222, conndict)
-
-    #{ conn2do #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'doughnut': {'inner_radius': 1.5,
-                                      'outer_radius': 3.},
-                         'anchor': [1.5, 1.5]}}
-    #{ end #}
-    free_mask_fig(fig, 223, conndict)
-
-    #{ conn2eo #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.},
-                         'anchor': [2.0, -1.0]}}
-    #{ end #}
-    free_mask_fig(fig, 224, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-    #-----------------------------------------------------------------------------#
-
-    fig = plt.figure()
-
-    #{ conn2rr #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                         'upper_right': [2., 1.],
-                                         'azimuth_angle': 120.}}}
-    #{ end #}
-    free_mask_fig(fig, 121, conndict)
-
-    #{ conn2er #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'elliptical': {'major_axis': 7.,
-                                        'minor_axis': 4.,
-                                        'azimuth_angle': 45.}}}
-    #{ end #}
-    free_mask_fig(fig, 122, conndict)
-
-    plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-    # 3d masks
-
-
-    def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                       showkern=False,
-                       xticks=range(-5, 6), yticks=range(-5, 6),
-                       xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-        if targets is None:
-            targets = ((tp.FindCenterElement(layer), 'red'),)
-
-        tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-        for src, clr in targets:
-            if showmask:
-                mask = connd['mask']
-            else:
-                mask = None
-            if showkern:
-                kern = connd['kernel']
-            else:
-                kern = None
-            tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                           src_size=250, tgt_color=clr, tgt_size=60,
-                           kernel_color='green')
-
-        ax = fig.gca()
-        ax.set_aspect('equal', 'box')
-        plt.draw()
-
-
-    def free_mask_3d_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer(
-            {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-             'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
-
-        fig.add_subplot(loc, projection='3d')
-        conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                       yticks=range(-5, 6, 2))
-
-
-    fig = plt.figure()
-
-    #{ conn_3d_a #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'box': {'lower_left': [-2., -1., -1.],
-                                 'upper_right': [2., 1., 1.]}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 121, conndict)
-
-    #{ conn_3d_b #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'spherical': {'radius': 2.5}}}
-    #{ end #}
-    free_mask_3d_fig(fig, 122, conndict)
-
-    #{ conn_3d_c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'ellipsoidal': {'major_axis': 7.,
-                                         'minor_axis': 4.,
-                                         'polar_axis': 4.5}}}
-    #{ end #}
-
-    plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-    # -----------------------------------------------
-
-    # grid masks
-
-    def grid_mask_fig(fig, loc, cdict):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn5lin-end
+```
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showmask=False)
+Results are shown in the top panel of
+Fig. {@fig:conn5}.
+Connection weights and delays are shown for the leftmost neuron as
+driver. Weights drop linearly from $1$. From the node at $(20,0)$
+on, the cutoff sets weights to 0. There are no connections to nodes
+beyond $(25,0)$, since the mask extends only 25 units to the right
+of the driver. Delays increase in a stepwise linear fashion, as NEST
+requires delays to be multiples of the simulation resolution.
 
+Linear example with periodic boundary conditions
 
-    fig = plt.figure()
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn5linpbc-end
+```
 
-    #{ conn3 #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5}}}
-    #{ end #}
-    grid_mask_fig(fig, 131, conndict)
+Results are shown in the middle panel of
+Fig. {@fig:conn5}.
+This example is identical to the previous, except that the (pool)
+layer has periodic boundary conditions. Therefore, the left half of
+the mask about the node at $(0,0)$ wraps back to the right half of
+ the layer and that node connects to all nodes in the layer.
 
-    #{ conn3c #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': 1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 132, conndict)
+Various functions
 
-    #{ conn3x #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'grid': {'rows': 3, 'columns': 5},
-                         'anchor': {'row': -1, 'column': 2}}}
-    #{ end #}
-    grid_mask_fig(fig, 133, conndict)
 
-    plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn5exp-end
+```
 
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn5gauss-end
+```
 
-    # -----------------------------------------------
+Results are shown in the bottom panel of Fig. {@fig:conn5}.
+It shows linear, exponential and Gaussian weight functions for the node at $(25,0)$.
 
-    # free masks
+Randomized weights and delays
 
-    def kernel_fig(fig, loc, cdict, showkern=True):
-        nest.ResetKernel()
-        l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                            'elements': 'iaf_psc_alpha'})
-        tp.ConnectLayers(l, l, cdict)
 
-        fig.add_subplot(loc)
-        conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                    showkern=showkern)
-
-
-    fig = plt.figure()
-
-    #{ conn4cp #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': 0.5}
-    #{ end #}
-    kernel_fig(fig, 231, conndict)
-
-    #{ conn4g #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.}}}
-    #{ end #}
-    kernel_fig(fig, 232, conndict)
-
-    #{ conn4gx #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.},
-                         'anchor': [1.5, 1.5]},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'anchor': [1.5, 1.5]}}}
-    #{ end #}
-    kernel_fig(fig, 233, conndict)
-    plt.draw()
-
-    #{ conn4cut #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian': {'p_center': 1.0,
-                                        'sigma': 1.,
-                                        'cutoff': 0.5}}}
-    #{ end #}
-    kernel_fig(fig, 234, conndict)
-
-    #{ conn42d #}
-    conndict = {'connection_type': 'divergent',
-                'mask': {'circular': {'radius': 4.}},
-                'kernel': {'gaussian2D': {'p_center': 1.0,
-                                          'sigma_x': 1.,
-                                          'sigma_y': 3.}}}
-    #{ end #}
-    kernel_fig(fig, 235, conndict, showkern=False)
-
-    plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-    # -----------------------------------------------
-
-
-    def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-               xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        if rpos is None:
-            rn = nest.GetLeaves(l)[0][:1]  # first node
-        else:
-            rn = tp.FindNearestElement(l, rpos)
-
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        vals = np.array([sd[what] for sd in cstat])
-        tgts = [sd['target'] for sd in cstat]
-        locs = np.array(tp.GetPosition(tgts))
-        ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        ax.set_xticks(xticks)
-        ax.set_yticks(yticks)
-
-
-    fig = plt.figure()
-
-    #{ conn5lin #}
-    ldict = {'rows': 1, 'columns': 51,
-             'extent': [51., 1.], 'center': [25., 0.],
-             'elements': 'iaf_psc_alpha'}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend()
-
-    lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-              'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    #{ conn5linpbc #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0,
-                                    'a': -0.05,
-                                    'cutoff': 0.0}},
-             'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-    #{ end #}
-    wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-    wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-    fig.gca().legend(loc=1)
-
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-           rpos=[25., 0.], clr='orange')
-
-    #{ conn5exp #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-           rpos=[25., 0.])
-
-    #{ conn5gauss #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-           rpos=[25., 0.])
-
-    #{ conn5uniform #}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                      'upper_right': [25.5, 0.5]}},
-             'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-    #{ end #}
-    wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-           rpos=[25., 0.])
-
-    fig.gca().legend()
-
-    plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-    # --------------------------------
-
-    def pn_fig(fig, loc, ldict, cdict,
-               xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-               yticks=np.arange(0., 1.1, 0.2), clr='blue',
-               label=''):
-        nest.ResetKernel()
-        l = tp.CreateLayer(ldict)
-        tp.ConnectLayers(l, l, cdict)
-
-        ax = fig.add_subplot(loc)
-
-        rn = nest.GetLeaves(l)[0]
-        conns = nest.GetConnections(rn)
-        cstat = nest.GetStatus(conns)
-        srcs = [sd['source'] for sd in cstat]
-        tgts = [sd['target'] for sd in cstat]
-        dist = np.array(tp.Distance(srcs, tgts))
-        ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-        r = np.arange(0., 0.51, 0.01)
-
-        plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-                 zorder=-10)
-
-        ax.set_xlim(xlim)
-        ax.set_ylim(ylim)
-        """ax.set_xticks(xticks)
-        ax.set_yticks(yticks)"""
-        # ax.set_aspect(100, 'box')
-        ax.set_xlabel('Source-target distance d')
-        ax.set_ylabel('Connection probability pconn(d)')
-
-
-    fig = plt.figure()
-
-    #{ conn6 #}
-    pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-           for j in range(1000)]
-    ldict = {'positions': pos, 'extent': [2., 2.],
-             'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-    cdict = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 1.0}},
-             'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-             'number_of_connections': 50,
-             'allow_multapses': True, 'allow_autapses': False}
-    #{ end #}
-    pn_fig(fig, 111, ldict, cdict)
-
-    plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-    # -----------------------------
-
-    #{ conn7 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'}}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'}}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn8 #}
-    nest.ResetKernel()
-    nest.CopyModel('iaf_psc_alpha', 'pyr')
-    nest.CopyModel('iaf_psc_alpha', 'in')
-    nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-    nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-    ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-    cdict_p2i = {'connection_type': 'divergent',
-                 'mask': {'circular': {'radius': 0.5}},
-                 'kernel': 0.8,
-                 'sources': {'model': 'pyr'},
-                 'targets': {'model': 'in'},
-                 'synapse_model': 'exc'}
-    cdict_i2p = {'connection_type': 'divergent',
-                 'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                          'upper_right': [0.2, 0.2]}},
-                 'sources': {'model': 'in'},
-                 'targets': {'model': 'pyr'},
-                 'synapse_model': 'inh'}
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict_p2i)
-    tp.ConnectLayers(l, l, cdict_i2p)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn9 #}
-    nrn_layer = tp.CreateLayer({'rows': 20,
-                                'columns': 20,
-                                'elements': 'iaf_psc_alpha'})
-
-    stim = tp.CreateLayer({'rows': 1,
-                           'columns': 1,
-                           'elements': 'poisson_generator'})
-
-    cdict_stim = {'connection_type': 'divergent',
-                  'mask': {'circular': {'radius': 0.1},
-                           'anchor': [0.2, 0.2]}}
-
-    tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-    #{ end #}
-
-
-    # ----------------------------
-
-    #{ conn10 #}
-    rec = tp.CreateLayer({'rows': 1,
-                          'columns': 1,
-                          'elements': 'spike_detector'})
-
-    cdict_rec = {'connection_type': 'convergent',
-                 'mask': {'circular': {'radius': 0.1},
-                          'anchor': [-0.2, 0.2]}}
-
-    tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-    #{ end #}
-
-    # ----------------------------
-
-    #{ conn11 #}
-    rec = nest.Create('spike_detector')
-    nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-    nest.Connect(nrns, rec)
-    #{ end #}
-    ```
+```
+    MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn5uniform-end
+```
 
-    By using the `'uniform'` function for weights or delays, one can
-    obtain randomized values for weights and delays, as shown by the red
-    circles in the bottom panel of
-    Fig. [3.4](#fig:conn5){reference-type="ref" reference="fig:conn5"}.
-    Weights and delays can currently only be randomized with uniform
-    distribution.
+By using the `'uniform'` function for weights or delays, one can
+obtain randomized values for weights and delays, as shown by the red
+circles in the bottom panel of Fig. {@fig:conn5}.
+Weights and delays can currently only be randomized with uniform distribution.
 
 ![Distance-dependent and randomized weights and delays. See text for
-details.[]{label="fig:conn5"}](conn5){#fig:conn5 width="0.9\linewidth"}
+details.](user_manual_figures/conn5.png){#fig:conn5}
 
 Periodic boundary conditions {#sec:conn_pbc}
 ----------------------------
@@ -23359,663 +1141,19 @@
 nodes at a certain distance with the kernel value for this distance. For
 the kernel and parameter values below we have
 $$p_{\text{conn}}(d) = \frac{12}{\pi} \times 2\pi r \times (1-2r)
- = 24 r (1-2r) \qquad \text{for} \quad 0\le r < \frac{1}{2}\;.
-\label{eq:ptheo}$$ The resulting distribution of distances between
-connected nodes is shown in Fig. [3.5](#fig:conn6){reference-type="ref"
-reference="fig:conn6"}.
-
-``` {.python linerange="conn6-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
+ = 24 r (1-2r) \qquad \text{for} \quad 0\le r < \frac{1}{2}\;.$$ {#eq:ptheo} 
+The resulting distribution of distances between
+connected nodes is shown in Fig. {@fig:conn6}.
 
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn6-end
 ```
 
 ![Distribution of distances between source and target for a network of
 1000 randomly placed nodes, a fixed fan out of 50 connections and a
 connection probability decaying linearly from 1 to 0 at $d=0.5$. The red
 line is the expected distribution from
-Eq. [\[eq:ptheo\]](#eq:ptheo){reference-type="ref"
-reference="eq:ptheo"}.[]{label="fig:conn6"}](conn6){#fig:conn6
-width="0.5\linewidth"}
+Eq. {@eq:ptheo}.](user_manual_figures/conn6.png){#fig:conn6}
 
 Functions determining weight and delay as function of
 distance/displacement work in just the same way as before when the
@@ -24046,649 +1184,8 @@
 probability and interneurons to pyramidal cells with a rectangular mask
 unit probability.
 
-``` {.python linerange="conn7-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn7-end
 ```
 
 Synapse models and properties {#sec:conn_synapse}
@@ -24699,649 +1196,8 @@
 model by adding a `'synapse_model'` entry to the connection dictionary,
 as in this example:
 
-``` {.python linerange="conn8-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn8-end
 ```
 
 You have to use synapse models if you want to set, e.g., the receptor
@@ -25359,1298 +1215,16 @@
 center of the mask. As demonstrated in the following example,
 stimulation devices require the divergent connection type
 
-``` {.python linerange="conn9-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn9-end
 ```
 
 while recording devices require the convergent connection type (see also
 Sec. [3.11](#sec:rec_dev){reference-type="ref"
 reference="sec:rec_dev"}):
 
-``` {.python linerange="conn10-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn10-end
 ```
 
 Layers and recording devices {#sec:rec_dev}
@@ -26661,649 +1235,8 @@
 create a single spike detector, and connect all neurons in the layer to
 that spike detector using a normal connect command:
 
-``` {.python linerange="conn11-end"}
-# -*- coding: utf-8 -*-
-#
-# connections.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# create connectivity figures for topology manual
-
-import nest
-import nest.topology as tp
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d.axes3d import Axes3D
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(7654321)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-def conn_figure(fig, layer, connd, targets=None, showmask=True, showkern=False,
-                xticks=range(-5, 6), yticks=range(-5, 6),
-                xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=60)
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=20,
-                       kernel_color='green')
-
-    beautify_layer(layer, fig,
-                   xlim=xlim, ylim=ylim, xticks=xticks, yticks=yticks,
-                   xlabel='', ylabel='')
-    fig.gca().grid(False)
-
-
-# -----------------------------------------------
-
-# Simple connection
-
-#{ conn1 #}
-l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-tp.ConnectLayers(l, l, conndict)
-#{ end #}
-
-fig = plt.figure()
-fig.add_subplot(121)
-conn_figure(fig, l, conndict,
-            targets=((tp.FindCenterElement(l), 'red'),
-                     (tp.FindNearestElement(l, [4., 5.]), 'yellow')))
-
-# same another time, with periodic bcs
-lpbc = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                       'elements': 'iaf_psc_alpha', 'edge_wrap': True})
-tp.ConnectLayers(lpbc, lpbc, conndict)
-fig.add_subplot(122)
-conn_figure(fig, lpbc, conndict, showmask=False,
-            targets=((tp.FindCenterElement(lpbc), 'red'),
-                     (tp.FindNearestElement(lpbc, [4., 5.]), 'yellow')))
-
-plt.savefig('../user_manual_figures/conn1.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def free_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2))
-
-fig = plt.figure()
-
-#{ conn2r #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]}}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0}}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.}}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2e #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.}}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_a.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2ro #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.]},
-                     'anchor': [-1.5, -1.5]}}
-#{ end #}
-free_mask_fig(fig, 221, conndict)
-
-#{ conn2co #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 2.0},
-                     'anchor': [-2.0, 0.0]}}
-#{ end #}
-free_mask_fig(fig, 222, conndict)
-
-#{ conn2do #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'doughnut': {'inner_radius': 1.5,
-                                  'outer_radius': 3.},
-                     'anchor': [1.5, 1.5]}}
-#{ end #}
-free_mask_fig(fig, 223, conndict)
-
-#{ conn2eo #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.},
-                     'anchor': [2.0, -1.0]}}
-#{ end #}
-free_mask_fig(fig, 224, conndict)
-
-plt.savefig('../user_manual_figures/conn2_b.png', bbox_inches='tight')
-
-#-----------------------------------------------------------------------------#
-
-fig = plt.figure()
-
-#{ conn2rr #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'rectangular': {'lower_left': [-2., -1.],
-                                     'upper_right': [2., 1.],
-                                     'azimuth_angle': 120.}}}
-#{ end #}
-free_mask_fig(fig, 121, conndict)
-
-#{ conn2er #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'elliptical': {'major_axis': 7.,
-                                    'minor_axis': 4.,
-                                    'azimuth_angle': 45.}}}
-#{ end #}
-free_mask_fig(fig, 122, conndict)
-
-plt.savefig('../user_manual_figures/conn2_c.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-# 3d masks
-
-
-def conn_figure_3d(fig, layer, connd, targets=None, showmask=True,
-                   showkern=False,
-                   xticks=range(-5, 6), yticks=range(-5, 6),
-                   xlim=[-5.5, 5.5], ylim=[-5.5, 5.5]):
-    if targets is None:
-        targets = ((tp.FindCenterElement(layer), 'red'),)
-
-    tp.PlotLayer(layer, fig=fig, nodesize=20, nodecolor=(.5, .5, 1.))
-    for src, clr in targets:
-        if showmask:
-            mask = connd['mask']
-        else:
-            mask = None
-        if showkern:
-            kern = connd['kernel']
-        else:
-            kern = None
-        tp.PlotTargets(src, layer, fig=fig, mask=mask, kernel=kern,
-                       src_size=250, tgt_color=clr, tgt_size=60,
-                       kernel_color='green')
-
-    ax = fig.gca()
-    ax.set_aspect('equal', 'box')
-    plt.draw()
-
-
-def free_mask_3d_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer(
-        {'rows': 11, 'columns': 11, 'layers': 11, 'extent': [11., 11., 11.],
-         'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc, projection='3d')
-    conn_figure_3d(fig, l, cdict, xticks=range(-5, 6, 2),
-                   yticks=range(-5, 6, 2))
-
-
-fig = plt.figure()
-
-#{ conn_3d_a #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'box': {'lower_left': [-2., -1., -1.],
-                             'upper_right': [2., 1., 1.]}}}
-#{ end #}
-free_mask_3d_fig(fig, 121, conndict)
-
-#{ conn_3d_b #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'spherical': {'radius': 2.5}}}
-#{ end #}
-free_mask_3d_fig(fig, 122, conndict)
-
-#{ conn_3d_c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'ellipsoidal': {'major_axis': 7.,
-                                     'minor_axis': 4.,
-                                     'polar_axis': 4.5}}}
-#{ end #}
-
-plt.savefig('../user_manual_figures/conn_3d.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# grid masks
-
-def grid_mask_fig(fig, loc, cdict):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showmask=False)
-
-
-fig = plt.figure()
-
-#{ conn3 #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5}}}
-#{ end #}
-grid_mask_fig(fig, 131, conndict)
-
-#{ conn3c #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': 1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 132, conndict)
-
-#{ conn3x #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'grid': {'rows': 3, 'columns': 5},
-                     'anchor': {'row': -1, 'column': 2}}}
-#{ end #}
-grid_mask_fig(fig, 133, conndict)
-
-plt.savefig('../user_manual_figures/conn3.png', bbox_inches='tight')
-
-
-# -----------------------------------------------
-
-# free masks
-
-def kernel_fig(fig, loc, cdict, showkern=True):
-    nest.ResetKernel()
-    l = tp.CreateLayer({'rows': 11, 'columns': 11, 'extent': [11., 11.],
-                        'elements': 'iaf_psc_alpha'})
-    tp.ConnectLayers(l, l, cdict)
-
-    fig.add_subplot(loc)
-    conn_figure(fig, l, cdict, xticks=range(-5, 6, 2), yticks=range(-5, 6, 2),
-                showkern=showkern)
-
-
-fig = plt.figure()
-
-#{ conn4cp #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': 0.5}
-#{ end #}
-kernel_fig(fig, 231, conndict)
-
-#{ conn4g #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.}}}
-#{ end #}
-kernel_fig(fig, 232, conndict)
-
-#{ conn4gx #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.},
-                     'anchor': [1.5, 1.5]},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'anchor': [1.5, 1.5]}}}
-#{ end #}
-kernel_fig(fig, 233, conndict)
-plt.draw()
-
-#{ conn4cut #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian': {'p_center': 1.0,
-                                    'sigma': 1.,
-                                    'cutoff': 0.5}}}
-#{ end #}
-kernel_fig(fig, 234, conndict)
-
-#{ conn42d #}
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 4.}},
-            'kernel': {'gaussian2D': {'p_center': 1.0,
-                                      'sigma_x': 1.,
-                                      'sigma_y': 3.}}}
-#{ end #}
-kernel_fig(fig, 235, conndict, showkern=False)
-
-plt.savefig('../user_manual_figures/conn4.png', bbox_inches='tight')
-
-# -----------------------------------------------
-
-
-def wd_fig(fig, loc, ldict, cdict, what, rpos=None,
-           xlim=[-1, 51], ylim=[0, 1], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    if rpos is None:
-        rn = nest.GetLeaves(l)[0][:1]  # first node
-    else:
-        rn = tp.FindNearestElement(l, rpos)
-
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    vals = np.array([sd[what] for sd in cstat])
-    tgts = [sd['target'] for sd in cstat]
-    locs = np.array(tp.GetPosition(tgts))
-    ax.plot(locs[:, 0], vals, 'o', mec='none', mfc=clr, label=label)
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-
-
-fig = plt.figure()
-
-#{ conn5lin #}
-ldict = {'rows': 1, 'columns': 51,
-         'extent': [51., 1.], 'center': [25., 0.],
-         'elements': 'iaf_psc_alpha'}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 311, ldict, cdict, 'weight', label='Weight')
-wd_fig(fig, 311, ldict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend()
-
-lpdict = {'rows': 1, 'columns': 51, 'extent': [51., 1.], 'center': [25., 0.],
-          'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-#{ conn5linpbc #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0,
-                                'a': -0.05,
-                                'cutoff': 0.0}},
-         'delays': {'linear': {'c': 0.1, 'a': 0.02}}}
-#{ end #}
-wd_fig(fig, 312, lpdict, cdict, 'weight', label='Weight')
-wd_fig(fig, 312, lpdict, cdict, 'delay', label='Delay', clr='red')
-fig.gca().legend(loc=1)
-
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'linear': {'c': 1.0, 'a': -0.05, 'cutoff': 0.0}}}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Linear',
-       rpos=[25., 0.], clr='orange')
-
-#{ conn5exp #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'exponential': {'a': 1., 'tau': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Exponential',
-       rpos=[25., 0.])
-
-#{ conn5gauss #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'gaussian': {'p_center': 1., 'sigma': 5.}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Gaussian', clr='green',
-       rpos=[25., 0.])
-
-#{ conn5uniform #}
-cdict = {'connection_type': 'divergent',
-         'mask': {'rectangular': {'lower_left': [-25.5, -0.5],
-                                  'upper_right': [25.5, 0.5]}},
-         'weights': {'uniform': {'min': 0.2, 'max': 0.8}}}
-#{ end #}
-wd_fig(fig, 313, ldict, cdict, 'weight', label='Uniform', clr='red',
-       rpos=[25., 0.])
-
-fig.gca().legend()
-
-plt.savefig('../user_manual_figures/conn5.png', bbox_inches='tight')
-
-
-# --------------------------------
-
-def pn_fig(fig, loc, ldict, cdict,
-           xlim=[0., .5], ylim=[0, 3.5], xticks=range(0, 51, 5),
-           yticks=np.arange(0., 1.1, 0.2), clr='blue',
-           label=''):
-    nest.ResetKernel()
-    l = tp.CreateLayer(ldict)
-    tp.ConnectLayers(l, l, cdict)
-
-    ax = fig.add_subplot(loc)
-
-    rn = nest.GetLeaves(l)[0]
-    conns = nest.GetConnections(rn)
-    cstat = nest.GetStatus(conns)
-    srcs = [sd['source'] for sd in cstat]
-    tgts = [sd['target'] for sd in cstat]
-    dist = np.array(tp.Distance(srcs, tgts))
-    ax.hist(dist, bins=50, histtype='stepfilled', normed=True)
-    r = np.arange(0., 0.51, 0.01)
-
-    plt.plot(r, 2 * np.pi * r * (1 - 2 * r) * 12 / np.pi, 'r-', lw=3,
-             zorder=-10)
-
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    """ax.set_xticks(xticks)
-    ax.set_yticks(yticks)"""
-    # ax.set_aspect(100, 'box')
-    ax.set_xlabel('Source-target distance d')
-    ax.set_ylabel('Connection probability pconn(d)')
-
-
-fig = plt.figure()
-
-#{ conn6 #}
-pos = [[np.random.uniform(-1., 1.), np.random.uniform(-1., 1.)]
-       for j in range(1000)]
-ldict = {'positions': pos, 'extent': [2., 2.],
-         'elements': 'iaf_psc_alpha', 'edge_wrap': True}
-cdict = {'connection_type': 'divergent',
-         'mask': {'circular': {'radius': 1.0}},
-         'kernel': {'linear': {'c': 1., 'a': -2., 'cutoff': 0.0}},
-         'number_of_connections': 50,
-         'allow_multapses': True, 'allow_autapses': False}
-#{ end #}
-pn_fig(fig, 111, ldict, cdict)
-
-plt.savefig('../user_manual_figures/conn6.png', bbox_inches='tight')
-
-# -----------------------------
-
-#{ conn7 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'}}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'}}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn8 #}
-nest.ResetKernel()
-nest.CopyModel('iaf_psc_alpha', 'pyr')
-nest.CopyModel('iaf_psc_alpha', 'in')
-nest.CopyModel('static_synapse', 'exc', {'weight': 2.0})
-nest.CopyModel('static_synapse', 'inh', {'weight': -8.0})
-ldict = {'rows': 10, 'columns': 10, 'elements': ['pyr', 'in']}
-cdict_p2i = {'connection_type': 'divergent',
-             'mask': {'circular': {'radius': 0.5}},
-             'kernel': 0.8,
-             'sources': {'model': 'pyr'},
-             'targets': {'model': 'in'},
-             'synapse_model': 'exc'}
-cdict_i2p = {'connection_type': 'divergent',
-             'mask': {'rectangular': {'lower_left': [-0.2, -0.2],
-                                      'upper_right': [0.2, 0.2]}},
-             'sources': {'model': 'in'},
-             'targets': {'model': 'pyr'},
-             'synapse_model': 'inh'}
-l = tp.CreateLayer(ldict)
-tp.ConnectLayers(l, l, cdict_p2i)
-tp.ConnectLayers(l, l, cdict_i2p)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn9 #}
-nrn_layer = tp.CreateLayer({'rows': 20,
-                            'columns': 20,
-                            'elements': 'iaf_psc_alpha'})
-
-stim = tp.CreateLayer({'rows': 1,
-                       'columns': 1,
-                       'elements': 'poisson_generator'})
-
-cdict_stim = {'connection_type': 'divergent',
-              'mask': {'circular': {'radius': 0.1},
-                       'anchor': [0.2, 0.2]}}
-
-tp.ConnectLayers(stim, nrn_layer, cdict_stim)
-#{ end #}
-
-
-# ----------------------------
-
-#{ conn10 #}
-rec = tp.CreateLayer({'rows': 1,
-                      'columns': 1,
-                      'elements': 'spike_detector'})
-
-cdict_rec = {'connection_type': 'convergent',
-             'mask': {'circular': {'radius': 0.1},
-                      'anchor': [-0.2, 0.2]}}
-
-tp.ConnectLayers(nrn_layer, rec, cdict_rec)
-#{ end #}
-
-# ----------------------------
-
-#{ conn11 #}
-rec = nest.Create('spike_detector')
-nrns = nest.GetLeaves(nrn_layer, local_only=True)[0]
-nest.Connect(nrns, rec)
-#{ end #}
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/connections.py lines conn11-end
 ```
 
 Connections to a layer of recording devices as described in
@@ -27401,364 +1334,16 @@
 center neuron (marked by large light-red circle). The large red circle
 is the mask, the dashed green lines mark $\sigma$, $2\sigma$ and
 $3\sigma$ of the Gaussian
-kernel.[]{label="fig:vislayer"}](vislayer){#fig:vislayer
-width="0.7\linewidth"}
+kernel.](user_manual_figures/vislayer.png){#fig:vislayer}
 
 The following code shows a practical example: A $21\times21$ network
 which connects to itself with divergent Gaussian connections. The
 resulting graphics is shown in
-Fig. [4.1](#fig:vislayer){reference-type="ref"
-reference="fig:vislayer"}. All elements and the targets of the center
+Fig. {@fig:vislayer}. All elements and the targets of the center
 neuron are shown, as well as mask and kernel.
 
-``` {.python linerange="vislayer-end"}
-# -*- coding: utf-8 -*-
-#
-# layers.py
-#
-# This file is part of NEST.
-#
-# Copyright (C) 2004 The NEST Initiative
-#
-# NEST is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 2 of the License, or
-# (at your option) any later version.
-#
-# NEST is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with NEST.  If not, see <http://www.gnu.org/licenses/>.
-
-# Run as python layers.py > layers.log
-
-import matplotlib.pyplot as plt
-import nest
-import numpy as np
-
-# seed NumPy RNG to ensure identical results for runs with random placement
-np.random.seed(1234567)
-
-
-def beautify_layer(l, fig=plt.gcf(), xlabel=None, ylabel=None,
-                   xlim=None, ylim=None, xticks=None, yticks=None, dx=0, dy=0):
-    """Assume either x and ylims/ticks given or none"""
-
-    top = nest.GetStatus(l)[0]['topology']
-    ctr = top['center']
-    ext = top['extent']
-
-    if xticks is None:
-        if 'rows' in top:
-            dx = float(ext[0]) / top['columns']
-            dy = float(ext[1]) / top['rows']
-            xticks = ctr[0] - ext[0] / 2. + dx / 2. + dx * np.arange(
-                top['columns'])
-            yticks = ctr[1] - ext[1] / 2. + dy / 2. + dy * np.arange(
-                top['rows'])
-
-    if xlim is None:
-        xlim = [ctr[0] - ext[0] / 2. - dx / 2., ctr[0] + ext[
-            0] / 2. + dx / 2.]  # extra space so extent is visible
-        ylim = [ctr[1] - ext[1] / 2. - dy / 2., ctr[1] + ext[1] / 2. + dy / 2.]
-    else:
-        ext = [xlim[1] - xlim[0], ylim[1] - ylim[0]]
-
-    ax = fig.gca()
-    ax.set_xlim(xlim)
-    ax.set_ylim(ylim)
-    ax.set_aspect('equal', 'box')
-    ax.set_xticks(xticks)
-    ax.set_yticks(yticks)
-    ax.grid(True)
-    ax.set_axisbelow(True)
-    ax.set_xlabel(xlabel)
-    ax.set_ylabel(ylabel)
-    return
-
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer1 #}
-import nest.topology as tp
-
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-for r in range(5):
-    tx.append(ax.text(0.65, 0.4 - r * 0.2, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-    tx.append(ax.text(-0.4 + r * 0.2, 0.65, str(r),
-                      horizontalalignment='center',
-                      verticalalignment='center'))
-
-# For bbox_extra_artists, see
-# https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer1.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-print("#{ layer1s.log #}")
-#{ layer1s #}
-print(nest.GetStatus(l)[0]['topology'])
-#{ end #}
-print("#{ end.log #}")
-
-print("#{ layer1p.log #}")
-#{ layer1p #}
-nest.PrintNetwork(depth=3)
-#{ end #}
-print("#{ end.log #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer2 #}
-l = tp.CreateLayer({'rows': 5,
-                    'columns': 5,
-                    'extent': [2.0, 0.5],
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)')
-ax = fig.gca()
-tx = []
-
-for r in range(5):
-    tx.append(fig.gca().text(1.25, 0.2 - r * 0.1, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-    tx.append(fig.gca().text(-0.8 + r * 0.4, 0.35, str(r),
-                             horizontalalignment='center',
-                             verticalalignment='center'))
-
-# See https://github.com/matplotlib/matplotlib/issues/351
-plt.savefig('../user_manual_figures/layer2.png', bbox_inches='tight',
-            bbox_extra_artists=tx)
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3 #}
-l1 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha'})
-l2 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [-1., 1.]})
-l3 = tp.CreateLayer({'rows': 5,
-                     'columns': 5,
-                     'elements': 'iaf_psc_alpha',
-                     'center': [1.5, 0.5]})
-#{ end #}
-
-fig = tp.PlotLayer(l1, nodesize=50)
-tp.PlotLayer(l2, nodesize=50, nodecolor='g', fig=fig)
-tp.PlotLayer(l3, nodesize=50, nodecolor='r', fig=fig)
-beautify_layer(l1, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-1.6, 2.1], ylim=[-0.6, 1.6],
-               xticks=np.arange(-1.4, 2.05, 0.2),
-               yticks=np.arange(-0.4, 1.45, 0.2))
-
-plt.savefig('../user_manual_figures/layer3.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer3a #}
-nc, nr = 5, 3
-d = 0.1
-l = tp.CreateLayer({'columns': nc,
-                    'rows': nr,
-                    'elements': 'iaf_psc_alpha',
-                    'extent': [nc * d, nr * d],
-                    'center': [nc * d / 2., 0.]})
-
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=100)
-plt.plot(0, 0, 'x', markersize=20, c='k', mew=3)
-plt.plot(nc * d / 2, 0, 'o', markersize=20, c='k', mew=3, mfc='none',
-         zorder=100)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xticks=np.arange(0., 0.501, 0.05),
-               yticks=np.arange(-0.15, 0.151, 0.05),
-               xlim=[-0.05, 0.55], ylim=[-0.2, 0.2])
-
-plt.savefig('../user_manual_figures/layer3a.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4 #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5)]
-       for j in range(50)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-beautify_layer(l, fig, xlabel='x-axis (columns)', ylabel='y-axis (rows)',
-               xlim=[-0.55, 0.55], ylim=[-0.55, 0.55],
-               xticks=[-0.5, 0., 0.5], yticks=[-0.5, 0., 0.5])
-
-plt.savefig('../user_manual_figures/layer4.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer4_3d #}
-import numpy as np
-
-pos = [[np.random.uniform(-0.5, 0.5), np.random.uniform(-0.5, 0.5),
-        np.random.uniform(-0.5, 0.5)] for j in range(200)]
-l = tp.CreateLayer({'positions': pos,
-                    'elements': 'iaf_psc_alpha'})
-#{ end #}
-
-fig = tp.PlotLayer(l, nodesize=50)
-
-plt.savefig('../user_manual_figures/layer4_3d.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ player #}
-lp = tp.CreateLayer({'rows': 1, 'columns': 5, 'extent': [5., 1.],
-                     'elements': 'iaf_psc_alpha',
-                     'edge_wrap': True})
-#{ end #}
-
-# fake plot with layer on line and circle
-clist = [(0, 0, 1), (0.35, 0, 1), (0.6, 0, 1), (0.8, 0, 1), (1.0, 0, 1)]
-fig = plt.figure()
-ax1 = fig.add_subplot(221)
-ax1.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1.scatter(range(1, 6), [0] * 5, s=200, c=clist)
-ax1.set_xlim([0, 6])
-ax1.set_ylim([-0.5, 1.25])
-ax1.set_aspect('equal', 'box')
-ax1.set_xticks([])
-ax1.set_yticks([])
-for j in range(1, 6):
-    ax1.text(j, 0.5, str('(%d,0)' % (j - 3)),
-             horizontalalignment='center', verticalalignment='bottom')
-
-ax1a = fig.add_subplot(223)
-ax1a.plot([0.5, 5.5], [0, 0], 'k-', lw=2)
-ax1a.scatter(range(1, 6), [0] * 5, s=200,
-             c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax1a.set_xlim([0, 6])
-ax1a.set_ylim([-0.5, 1.25])
-ax1a.set_aspect('equal', 'box')
-ax1a.set_xticks([])
-ax1a.set_yticks([])
-for j in range(1, 6):
-    ax1a.text(j, 0.5, str('(%d,0)' % (j - 3)),
-              horizontalalignment='center', verticalalignment='bottom')
-
-ax2 = fig.add_subplot(122)
-phic = np.arange(0., 2 * np.pi + 0.5, 0.1)
-r = 5. / (2 * np.pi)
-ax2.plot(r * np.cos(phic), r * np.sin(phic), 'k-', lw=2)
-phin = np.arange(0., 4.1, 1.) * 2 * np.pi / 5
-ax2.scatter(r * np.sin(phin), r * np.cos(phin), s=200,
-            c=[clist[0], clist[1], clist[2], clist[2], clist[1]])
-ax2.set_xlim([-1.3, 1.3])
-ax2.set_ylim([-1.2, 1.2])
-ax2.set_aspect('equal', 'box')
-ax2.set_xticks([])
-ax2.set_yticks([])
-for j in range(5):
-    ax2.text(1.4 * r * np.sin(phin[j]), 1.4 * r * np.cos(phin[j]),
-             str('(%d,0)' % (j + 1 - 3)),
-             horizontalalignment='center', verticalalignment='center')
-
-plt.savefig('../user_manual_figures/player.png', bbox_inches='tight')
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer6 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha',
-                                 'poisson_generator']})
-#{ end #}
-
-print("#{ layer6 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer7 #}
-l = tp.CreateLayer({'rows': 1, 'columns': 2,
-                    'elements': ['iaf_cond_alpha', 10,
-                                 'poisson_generator',
-                                 'noise_generator', 2]})
-#{ end #}
-
-print("#{ layer7 #}")
-nest.PrintNetwork(depth=3)
-print("#{ end #}")
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ layer10 #}
-for lyr in ['L23', 'L4', 'L56']:
-    nest.CopyModel('iaf_psc_alpha', lyr + 'pyr')
-    nest.CopyModel('iaf_psc_alpha', lyr + 'in', {'V_th': -52.})
-l = tp.CreateLayer({'rows': 20, 'columns': 20, 'extent': [0.5, 0.5],
-                    'elements': ['L23pyr', 3, 'L23in',
-                                 'L4pyr', 3, 'L4in',
-                                 'L56pyr', 3, 'L56in']})
-#{ end #}
-
-# --------------------------------------------------
-
-nest.ResetKernel()
-
-#{ vislayer #}
-l = tp.CreateLayer({'rows': 21, 'columns': 21,
-                    'elements': 'iaf_psc_alpha'})
-conndict = {'connection_type': 'divergent',
-            'mask': {'circular': {'radius': 0.4}},
-            'kernel': {'gaussian': {'p_center': 1.0, 'sigma': 0.15}}}
-tp.ConnectLayers(l, l, conndict)
-fig = tp.PlotLayer(l, nodesize=80)
-ctr = tp.FindCenterElement(l)
-tp.PlotTargets(ctr, l, fig=fig,
-               mask=conndict['mask'], kernel=conndict['kernel'],
-               src_size=250, tgt_color='red', tgt_size=20,
-               kernel_color='green')
-#{ end #}
-plt.savefig('../user_manual_figures/vislayer.png', bbox_inches='tight')
+```
+MISSING SCRIPT BLOCK HERE! file: user_manual_scripts/layers.py lines vislayer-end
 ```
 
 Adding topology kernels and masks {#ch:extending}
@@ -28105,6 +1690,10 @@
     applied to are now prohibited by default. This avoids multiple
     connections when masks overwrap.
 
+References
+==========
+
+
 [^1]: NEST is available under an open source license at
     [www.nest-simulator.org](www.nest-simulator.org).
 
