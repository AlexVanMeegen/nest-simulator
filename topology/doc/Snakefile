
rule done:
    input:
        'Topology_UserManual.html',
        'Topology_UserManual.pdf',
        'Topology_UserManual.rst',
        'README.md',

SRCFMT = "markdown+yaml_metadata_block+smart+implicit_figures+implicit_header_references+simple_tables"

rule tex2md:
    '''
    Convert the LaTeX document to a Markdown source file.

    This rule is not needed anymore once the Markdown document becomes the
    authoritaive source.
    '''
    input:
        tex = 'Topology_UserManual.tex',
    output:
        original = 'Topology_UserManual-original.md',
    shell:
        '''
        pandoc -f latex -t markdown --listings '{input.tex}' >'{output.original}'
        '''

rule patch_md:
    '''
    Some Information can not be extracted automatically or produces buggy
    output. For this a patch file is applied. See `patch` rule!!!
    '''
    input:
        patch = 'Topology_UserManual.md.patch',
        original = 'Topology_UserManual-original.md',
    output:
        patched = 'Topology_UserManual-patched.md',
    shell:
        '''
        cp -v {input.original} {output.patched}
        patch -p0 <'{input.patch}'
        '''

rule expand_listings:
    '''
    This rule fills all the missing code snippets that pandoc can not
    automatically inject from the latex lstlistings commands.
    '''
    input:
        'Topology_UserManual-patched.md',
    output:
        'Topology_UserManual.md',
    shell:
        '''
        ./insert.py '{input}' >'{output}'
        '''

rule bib2yml:
    '''
    This rule converts the bibtex bibliography to yaml
    '''
    input:
        '../../extras/bibliography/nest.bib',
    output:
        'nest_bib.yaml',
    shell:
        '''
        pandoc-citeproc --bib2yaml '{input}' > '{output}'
        '''

rule md2html:
    input:
        file = 'Topology_UserManual.md',
        css = 'Topology_UserManual.css',
        meta = 'metadata.yaml',
        bib ='nest_bib.yaml',
    output:
        'Topology_UserManual.html'
    shell:
        '''
        pandoc -f {SRCFMT} -t html \
               --filter pandoc-fignos --filter pandoc-eqnos --filter pandoc-tablenos  \
               --number-sections \
               --filter pandoc-citeproc --csl nest_style.csl --bibliography {input.bib} \
               --standalone \
               --toc \
               --mathml \
               --css '{input.css}' \
               '{input.file}' '{input.meta}' -o '{output}'
        '''

rule md2pdf:
    input:
        file = 'Topology_UserManual.md',
        css = 'Topology_UserManual.css',
        meta = 'metadata.yaml',
        bib ='nest_bib.yaml',
    output:
        'Topology_UserManual.pdf'
    shell:
        '''
        pandoc -f {SRCFMT} -t latex \
               --filter pandoc-fignos --filter pandoc-eqnos --filter pandoc-tablenos \
               --number-sections \
               --pdf-engine=$(command -v xelatex) \
               --filter pandoc-citeproc --csl nest_style.csl --bibliography {input.bib} \
               --listings --toc \
               '{input.file}' '{input.meta}' -o '{output}'
        '''

rule md2rst:
    input:
        file = 'Topology_UserManual.md',
        meta = 'metadata.yaml',
        bib ='nest_bib.yaml',
    output:
        'Topology_UserManual.rst',
    shell:
        '''
        pandoc -f {SRCFMT} -t rst \
               --filter pandoc-fignos --filter pandoc-eqnos --filter pandoc-tablenos \
               --filter pandoc-citeproc --csl nest_style.csl --bibliography {input.bib} \
               --toc \
               '{input.file}' '{input.meta}' -o '{output}'
        '''


rule md2github:
    input:
        file = 'Topology_UserManual.md',
        meta = 'metadata.yaml',
        bib ='nest_bib.yaml',
    output:
        'README.md',
    shell:
        '''
        pandoc -f {SRCFMT} -t gfm \
               --filter pandoc-fignos --filter pandoc-eqnos --filter pandoc-tablenos \
               --number-sections \
               --filter pandoc-citeproc --csl nest_style.csl --bibliography {input.bib}\
               --listings --toc \
               '{input.file}' '{input.meta}' -o '{output}'
        '''

rule make_patch:
    '''
    Run this rule whenever you do manual changes to the intermediate Markdown
    file!

    When the Markdown file manually edited the changes will be lost upon next
    convert from LaTeX sources. This rule saves the changes in a patch that is
    automatically applied next time the tex2md rule is run.
    '''
    input:
        old=ancient('Topology_UserManual-original.md'),
        new=ancient('Topology_UserManual-patched.md'),
    output:
        'Topology_UserManual.md.patch'
    shell:
        '''
        diff -u '{input.old}' '{input.new}' --label '{input.new}' --label '{input.new}'  >'{output}' || true
        '''
