/*
 *  test_multiple_synapses_spatial_networks.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/** @BeginDocumentation
    Name: testsuite::test_multiple_synapses_spatial_networks - Test that ConnectLayer with list of synapse dictionaries 
                                                               use the correct values when connecting

    Synopsis: (test_multiple_synapses_spatial_networks) run -> - 

    Description:
    test_multiple_synapses_spatial_networks.sli checks that when ConnectLayer is given a list of synapse dictionaries,
    the given values are used when we have more than one process.
    
    Author: Stine Brekke Vennemo
    FirstVersion: June 2020
*/

(unittest) run
/unittest using


[1 2 4 8]
{
  ResetKernel
  
  [-0.5 0.5 0.25] Range
  { /x Set [0.5 -0.5 -0.25] Range { x exch 2 arraystore } Map } Map 1 Flatten
  /pos Set
  
  /layer_spec
  << /positions pos
    /extent [1.25 1.25]
    /elements /iaf_psc_alpha
  >> def

  % There are 25 positions in positions vector, so 25 neurons per source and target
  /layer_src layer_spec CreateLayer def
  /layer_trg layer_spec CreateLayer def

  
  layer_src layer_trg
   <<
     /connection_type /pairwise_bernoulli_on_target /number_of_connections 10 % 10 connections per target
     /synapse_parameters
       [<< /weight -3. >> << /synapse_model /stdp_synapse /weight 2. /delay 1.9 >> << /weight 3. /delay 1.3 >> ]
   >>
   ConnectLayers
  
  /weight_delay_syn [] def
  << >> GetConnections /conns Set  
  conns GetStatus
  {
    dup
    dup
    
    /weight get /w Set
    /delay get /d Set
    /synapse_model get /sm Set
    
    weight_delay_syn
      w append
      d append
      sm append /weight_delay_syn Set
  } forall
  
  weight_delay_syn
}
{
  /results Set
  /cumulative_res_list [] def
  
  % Create a reference list with the values we expect (values taken from syn_spec list above).
  /reference_list [] def
  [10 25 mul 2 mul] Range
  {
    /indx Set
    indx 2 mod 0 eq
    {
      reference_list [3. 1.3 /static_synapse] join /reference_list Set
    }
    {
      reference_list [-3. 1. /static_synapse] join /reference_list Set 
    } ifelse
  } forall
  
  /reference_list reference_list [10 25 mul] [2. 1.9 /stdp_synapse] LayoutArray Flatten append Flatten def

  % Go through results from different processes and append them to eachother.
  results 0 get
  {
    /mpi_res Set
    
    mpi_res
    {
      cumulative_res_list exch append /cumulative_res_list Set
    } forall
  } forall

  % check that length of the cumulative result list from the different processes have right length,
  % we have 10 times 25 times 3 connections and 3 elements extracted (weight, delay, synapse_model).
  cumulative_res_list length 10 25 mul 3 mul 3 mul eq
  
  % Also check that the cumulative result list contains all variables we expect.
  cumulative_res_list reference_list eq and
}
distributed_collect_assert_or_die
