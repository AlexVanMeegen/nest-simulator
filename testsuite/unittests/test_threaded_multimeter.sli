/*
 *  test_threaded_multimeter.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


/* BeginDocumentation
Name: testsuite::test_threaded_multimeter - test support for multimeter

Synopsis: (test_threaded_multimeter.sli) run -> dies if assertion fails

Description:

Author: Stine B. Vennemo
FirstVersion: June 2017
*/

(unittest) run
/unittest using

M_ERROR setverbosity

/run_multimeter
{
  << >> begin
    /n_threads Set

    /N 10 def  % should not be divisible by thread number
  
    ResetKernel
    GetKernelStatus /num_processes get 1 eq assert % distributed setting not covered
    << /local_num_threads n_threads >> SetKernelStatus

    % actual neurons
    /nrns /iaf_cond_alpha N << /I_e 40. >> Create def
    nrns { dup /global_id get 1 sub 30. N div mul -90. add 
               /foo << >> def foo exch /V_m exch put foo SetStatus } forall

    % multimeter
    /ac /multimeter << /record_from [ /V_m ] /withgid true /interval 1.
                       /to_memory true /to_accumulator false >> Create def  
    ac nrns cvgidcollection Connect

    5. Simulate

    % obtain data 
    ac /events get dup /V_m get cva exch /senders get cva
  end
}
def

{
  << >> begin
 ('thread = 1') ==
 1 run_multimeter /r1s Set /r1V Set
 ('thread = 3') ==
 3 run_multimeter /r3s Set /r3V Set
 
 ('------------') ==
 r1s ==
 r1V ==
 r3s ==
 r3V ==
 
 r1V r3V eq
 r1s r3s eq
 
  end
} assert_or_die

endusing
